// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: router.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_router_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_router_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_router_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_router_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[13]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_router_2eproto;
namespace router {
class Arg;
struct ArgDefaultTypeInternal;
extern ArgDefaultTypeInternal _Arg_default_instance_;
class InferEnqueueArg;
struct InferEnqueueArgDefaultTypeInternal;
extern InferEnqueueArgDefaultTypeInternal _InferEnqueueArg_default_instance_;
class InferEnqueueReturn;
struct InferEnqueueReturnDefaultTypeInternal;
extern InferEnqueueReturnDefaultTypeInternal _InferEnqueueReturn_default_instance_;
class InferWorkerArg;
struct InferWorkerArgDefaultTypeInternal;
extern InferWorkerArgDefaultTypeInternal _InferWorkerArg_default_instance_;
class InferWorkerReturn;
struct InferWorkerReturnDefaultTypeInternal;
extern InferWorkerReturnDefaultTypeInternal _InferWorkerReturn_default_instance_;
class LoadModelWorkerArg;
struct LoadModelWorkerArgDefaultTypeInternal;
extern LoadModelWorkerArgDefaultTypeInternal _LoadModelWorkerArg_default_instance_;
class LoadModelWorkerReturn;
struct LoadModelWorkerReturnDefaultTypeInternal;
extern LoadModelWorkerReturnDefaultTypeInternal _LoadModelWorkerReturn_default_instance_;
class RequestHeader;
struct RequestHeaderDefaultTypeInternal;
extern RequestHeaderDefaultTypeInternal _RequestHeader_default_instance_;
class ResponseHeader;
struct ResponseHeaderDefaultTypeInternal;
extern ResponseHeaderDefaultTypeInternal _ResponseHeader_default_instance_;
class SetRouterSpecArg;
struct SetRouterSpecArgDefaultTypeInternal;
extern SetRouterSpecArgDefaultTypeInternal _SetRouterSpecArg_default_instance_;
class SetRouterSpecReturn;
struct SetRouterSpecReturnDefaultTypeInternal;
extern SetRouterSpecReturnDefaultTypeInternal _SetRouterSpecReturn_default_instance_;
class SubnetDimension;
struct SubnetDimensionDefaultTypeInternal;
extern SubnetDimensionDefaultTypeInternal _SubnetDimension_default_instance_;
class TorchTensorArg;
struct TorchTensorArgDefaultTypeInternal;
extern TorchTensorArgDefaultTypeInternal _TorchTensorArg_default_instance_;
}  // namespace router
PROTOBUF_NAMESPACE_OPEN
template<> ::router::Arg* Arena::CreateMaybeMessage<::router::Arg>(Arena*);
template<> ::router::InferEnqueueArg* Arena::CreateMaybeMessage<::router::InferEnqueueArg>(Arena*);
template<> ::router::InferEnqueueReturn* Arena::CreateMaybeMessage<::router::InferEnqueueReturn>(Arena*);
template<> ::router::InferWorkerArg* Arena::CreateMaybeMessage<::router::InferWorkerArg>(Arena*);
template<> ::router::InferWorkerReturn* Arena::CreateMaybeMessage<::router::InferWorkerReturn>(Arena*);
template<> ::router::LoadModelWorkerArg* Arena::CreateMaybeMessage<::router::LoadModelWorkerArg>(Arena*);
template<> ::router::LoadModelWorkerReturn* Arena::CreateMaybeMessage<::router::LoadModelWorkerReturn>(Arena*);
template<> ::router::RequestHeader* Arena::CreateMaybeMessage<::router::RequestHeader>(Arena*);
template<> ::router::ResponseHeader* Arena::CreateMaybeMessage<::router::ResponseHeader>(Arena*);
template<> ::router::SetRouterSpecArg* Arena::CreateMaybeMessage<::router::SetRouterSpecArg>(Arena*);
template<> ::router::SetRouterSpecReturn* Arena::CreateMaybeMessage<::router::SetRouterSpecReturn>(Arena*);
template<> ::router::SubnetDimension* Arena::CreateMaybeMessage<::router::SubnetDimension>(Arena*);
template<> ::router::TorchTensorArg* Arena::CreateMaybeMessage<::router::TorchTensorArg>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace router {

enum TorchTensorType : int {
  TFLOAT = 0,
  TDOUBLE = 1,
  TCOMPLEX128 = 3,
  TCFLOAT = 4,
  TFLOAT16 = 5,
  TBFLOAT16 = 6,
  TUINT8 = 7,
  TINT8 = 8,
  TINT16 = 9,
  TINT = 10,
  TLONG = 11,
  TBOOL = 12
};
bool TorchTensorType_IsValid(int value);
constexpr TorchTensorType TorchTensorType_MIN = TFLOAT;
constexpr TorchTensorType TorchTensorType_MAX = TBOOL;
constexpr int TorchTensorType_ARRAYSIZE = TorchTensorType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TorchTensorType_descriptor();
template<typename T>
inline const std::string& TorchTensorType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, TorchTensorType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function TorchTensorType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    TorchTensorType_descriptor(), enum_t_value);
}
inline bool TorchTensorType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, TorchTensorType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<TorchTensorType>(
    TorchTensorType_descriptor(), name, value);
}
enum ArgType : int {
  DOUBLE = 1,
  FLOAT = 2,
  INT32 = 3,
  INT64 = 4,
  UINT64 = 5,
  SINT32 = 6,
  SINT64 = 7,
  FIXED32 = 8,
  FIXED64 = 9,
  SFIXED32 = 10,
  SFIXED64 = 11,
  BOOL = 12,
  STRING = 13,
  TORCHTENSOR = 14
};
bool ArgType_IsValid(int value);
constexpr ArgType ArgType_MIN = DOUBLE;
constexpr ArgType ArgType_MAX = TORCHTENSOR;
constexpr int ArgType_ARRAYSIZE = ArgType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ArgType_descriptor();
template<typename T>
inline const std::string& ArgType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ArgType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ArgType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ArgType_descriptor(), enum_t_value);
}
inline bool ArgType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ArgType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ArgType>(
    ArgType_descriptor(), name, value);
}
// ===================================================================

class RequestHeader final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:router.RequestHeader) */ {
 public:
  inline RequestHeader() : RequestHeader(nullptr) {}
  ~RequestHeader() override;
  explicit constexpr RequestHeader(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RequestHeader(const RequestHeader& from);
  RequestHeader(RequestHeader&& from) noexcept
    : RequestHeader() {
    *this = ::std::move(from);
  }

  inline RequestHeader& operator=(const RequestHeader& from) {
    CopyFrom(from);
    return *this;
  }
  inline RequestHeader& operator=(RequestHeader&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RequestHeader& default_instance() {
    return *internal_default_instance();
  }
  static inline const RequestHeader* internal_default_instance() {
    return reinterpret_cast<const RequestHeader*>(
               &_RequestHeader_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(RequestHeader& a, RequestHeader& b) {
    a.Swap(&b);
  }
  inline void Swap(RequestHeader* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RequestHeader* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RequestHeader* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RequestHeader>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RequestHeader& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RequestHeader& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RequestHeader* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "router.RequestHeader";
  }
  protected:
  explicit RequestHeader(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIdFieldNumber = 1,
    kUserRequestIdFieldNumber = 2,
  };
  // required int32 user_id = 1;
  bool has_user_id() const;
  private:
  bool _internal_has_user_id() const;
  public:
  void clear_user_id();
  int32_t user_id() const;
  void set_user_id(int32_t value);
  private:
  int32_t _internal_user_id() const;
  void _internal_set_user_id(int32_t value);
  public:

  // optional int32 user_request_id = 2;
  bool has_user_request_id() const;
  private:
  bool _internal_has_user_request_id() const;
  public:
  void clear_user_request_id();
  int32_t user_request_id() const;
  void set_user_request_id(int32_t value);
  private:
  int32_t _internal_user_request_id() const;
  void _internal_set_user_request_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:router.RequestHeader)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int32_t user_id_;
  int32_t user_request_id_;
  friend struct ::TableStruct_router_2eproto;
};
// -------------------------------------------------------------------

class ResponseHeader final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:router.ResponseHeader) */ {
 public:
  inline ResponseHeader() : ResponseHeader(nullptr) {}
  ~ResponseHeader() override;
  explicit constexpr ResponseHeader(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ResponseHeader(const ResponseHeader& from);
  ResponseHeader(ResponseHeader&& from) noexcept
    : ResponseHeader() {
    *this = ::std::move(from);
  }

  inline ResponseHeader& operator=(const ResponseHeader& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResponseHeader& operator=(ResponseHeader&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ResponseHeader& default_instance() {
    return *internal_default_instance();
  }
  static inline const ResponseHeader* internal_default_instance() {
    return reinterpret_cast<const ResponseHeader*>(
               &_ResponseHeader_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ResponseHeader& a, ResponseHeader& b) {
    a.Swap(&b);
  }
  inline void Swap(ResponseHeader* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ResponseHeader* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ResponseHeader* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ResponseHeader>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ResponseHeader& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ResponseHeader& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResponseHeader* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "router.ResponseHeader";
  }
  protected:
  explicit ResponseHeader(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserRequestIdFieldNumber = 1,
    kStatusFieldNumber = 2,
  };
  // optional int32 user_request_id = 1;
  bool has_user_request_id() const;
  private:
  bool _internal_has_user_request_id() const;
  public:
  void clear_user_request_id();
  int32_t user_request_id() const;
  void set_user_request_id(int32_t value);
  private:
  int32_t _internal_user_request_id() const;
  void _internal_set_user_request_id(int32_t value);
  public:

  // optional int32 status = 2;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  int32_t status() const;
  void set_status(int32_t value);
  private:
  int32_t _internal_status() const;
  void _internal_set_status(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:router.ResponseHeader)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int32_t user_request_id_;
  int32_t status_;
  friend struct ::TableStruct_router_2eproto;
};
// -------------------------------------------------------------------

class SetRouterSpecArg final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:router.SetRouterSpecArg) */ {
 public:
  inline SetRouterSpecArg() : SetRouterSpecArg(nullptr) {}
  ~SetRouterSpecArg() override;
  explicit constexpr SetRouterSpecArg(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetRouterSpecArg(const SetRouterSpecArg& from);
  SetRouterSpecArg(SetRouterSpecArg&& from) noexcept
    : SetRouterSpecArg() {
    *this = ::std::move(from);
  }

  inline SetRouterSpecArg& operator=(const SetRouterSpecArg& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetRouterSpecArg& operator=(SetRouterSpecArg&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetRouterSpecArg& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetRouterSpecArg* internal_default_instance() {
    return reinterpret_cast<const SetRouterSpecArg*>(
               &_SetRouterSpecArg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(SetRouterSpecArg& a, SetRouterSpecArg& b) {
    a.Swap(&b);
  }
  inline void Swap(SetRouterSpecArg* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetRouterSpecArg* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetRouterSpecArg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetRouterSpecArg>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SetRouterSpecArg& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SetRouterSpecArg& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetRouterSpecArg* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "router.SetRouterSpecArg";
  }
  protected:
  explicit SetRouterSpecArg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderFieldNumber = 1,
    kMaxBatchSizeFieldNumber = 2,
  };
  // required .router.RequestHeader header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::router::RequestHeader& header() const;
  PROTOBUF_NODISCARD ::router::RequestHeader* release_header();
  ::router::RequestHeader* mutable_header();
  void set_allocated_header(::router::RequestHeader* header);
  private:
  const ::router::RequestHeader& _internal_header() const;
  ::router::RequestHeader* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::router::RequestHeader* header);
  ::router::RequestHeader* unsafe_arena_release_header();

  // optional int32 max_batch_size = 2;
  bool has_max_batch_size() const;
  private:
  bool _internal_has_max_batch_size() const;
  public:
  void clear_max_batch_size();
  int32_t max_batch_size() const;
  void set_max_batch_size(int32_t value);
  private:
  int32_t _internal_max_batch_size() const;
  void _internal_set_max_batch_size(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:router.SetRouterSpecArg)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::router::RequestHeader* header_;
  int32_t max_batch_size_;
  friend struct ::TableStruct_router_2eproto;
};
// -------------------------------------------------------------------

class SetRouterSpecReturn final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:router.SetRouterSpecReturn) */ {
 public:
  inline SetRouterSpecReturn() : SetRouterSpecReturn(nullptr) {}
  ~SetRouterSpecReturn() override;
  explicit constexpr SetRouterSpecReturn(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetRouterSpecReturn(const SetRouterSpecReturn& from);
  SetRouterSpecReturn(SetRouterSpecReturn&& from) noexcept
    : SetRouterSpecReturn() {
    *this = ::std::move(from);
  }

  inline SetRouterSpecReturn& operator=(const SetRouterSpecReturn& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetRouterSpecReturn& operator=(SetRouterSpecReturn&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetRouterSpecReturn& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetRouterSpecReturn* internal_default_instance() {
    return reinterpret_cast<const SetRouterSpecReturn*>(
               &_SetRouterSpecReturn_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(SetRouterSpecReturn& a, SetRouterSpecReturn& b) {
    a.Swap(&b);
  }
  inline void Swap(SetRouterSpecReturn* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetRouterSpecReturn* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetRouterSpecReturn* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetRouterSpecReturn>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SetRouterSpecReturn& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SetRouterSpecReturn& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetRouterSpecReturn* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "router.SetRouterSpecReturn";
  }
  protected:
  explicit SetRouterSpecReturn(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderFieldNumber = 1,
  };
  // required .router.ResponseHeader header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::router::ResponseHeader& header() const;
  PROTOBUF_NODISCARD ::router::ResponseHeader* release_header();
  ::router::ResponseHeader* mutable_header();
  void set_allocated_header(::router::ResponseHeader* header);
  private:
  const ::router::ResponseHeader& _internal_header() const;
  ::router::ResponseHeader* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::router::ResponseHeader* header);
  ::router::ResponseHeader* unsafe_arena_release_header();

  // @@protoc_insertion_point(class_scope:router.SetRouterSpecReturn)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::router::ResponseHeader* header_;
  friend struct ::TableStruct_router_2eproto;
};
// -------------------------------------------------------------------

class TorchTensorArg final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:router.TorchTensorArg) */ {
 public:
  inline TorchTensorArg() : TorchTensorArg(nullptr) {}
  ~TorchTensorArg() override;
  explicit constexpr TorchTensorArg(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TorchTensorArg(const TorchTensorArg& from);
  TorchTensorArg(TorchTensorArg&& from) noexcept
    : TorchTensorArg() {
    *this = ::std::move(from);
  }

  inline TorchTensorArg& operator=(const TorchTensorArg& from) {
    CopyFrom(from);
    return *this;
  }
  inline TorchTensorArg& operator=(TorchTensorArg&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TorchTensorArg& default_instance() {
    return *internal_default_instance();
  }
  static inline const TorchTensorArg* internal_default_instance() {
    return reinterpret_cast<const TorchTensorArg*>(
               &_TorchTensorArg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(TorchTensorArg& a, TorchTensorArg& b) {
    a.Swap(&b);
  }
  inline void Swap(TorchTensorArg* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TorchTensorArg* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TorchTensorArg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TorchTensorArg>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TorchTensorArg& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TorchTensorArg& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TorchTensorArg* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "router.TorchTensorArg";
  }
  protected:
  explicit TorchTensorArg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kByteDataFieldNumber = 1,
  };
  // required bytes byte_data = 1;
  bool has_byte_data() const;
  private:
  bool _internal_has_byte_data() const;
  public:
  void clear_byte_data();
  const std::string& byte_data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_byte_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_byte_data();
  PROTOBUF_NODISCARD std::string* release_byte_data();
  void set_allocated_byte_data(std::string* byte_data);
  private:
  const std::string& _internal_byte_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_byte_data(const std::string& value);
  std::string* _internal_mutable_byte_data();
  public:

  // @@protoc_insertion_point(class_scope:router.TorchTensorArg)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr byte_data_;
  friend struct ::TableStruct_router_2eproto;
};
// -------------------------------------------------------------------

class Arg final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:router.Arg) */ {
 public:
  inline Arg() : Arg(nullptr) {}
  ~Arg() override;
  explicit constexpr Arg(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Arg(const Arg& from);
  Arg(Arg&& from) noexcept
    : Arg() {
    *this = ::std::move(from);
  }

  inline Arg& operator=(const Arg& from) {
    CopyFrom(from);
    return *this;
  }
  inline Arg& operator=(Arg&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Arg& default_instance() {
    return *internal_default_instance();
  }
  static inline const Arg* internal_default_instance() {
    return reinterpret_cast<const Arg*>(
               &_Arg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(Arg& a, Arg& b) {
    a.Swap(&b);
  }
  inline void Swap(Arg* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Arg* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Arg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Arg>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Arg& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Arg& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Arg* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "router.Arg";
  }
  protected:
  explicit Arg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStringArgFieldNumber = 13,
    kTorchTensorArgFieldNumber = 14,
    kDoubleArgFieldNumber = 1,
    kFloatArgFieldNumber = 2,
    kInt32ArgFieldNumber = 3,
    kInt64ArgFieldNumber = 4,
    kUint64ArgFieldNumber = 5,
    kSint64ArgFieldNumber = 7,
    kSint32ArgFieldNumber = 6,
    kFixed32ArgFieldNumber = 8,
    kFixed64ArgFieldNumber = 9,
    kSfixed64ArgFieldNumber = 11,
    kSfixed32ArgFieldNumber = 10,
    kBoolArgFieldNumber = 12,
    kArgTypeFieldNumber = 15,
  };
  // optional string string_arg = 13;
  bool has_string_arg() const;
  private:
  bool _internal_has_string_arg() const;
  public:
  void clear_string_arg();
  const std::string& string_arg() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_string_arg(ArgT0&& arg0, ArgT... args);
  std::string* mutable_string_arg();
  PROTOBUF_NODISCARD std::string* release_string_arg();
  void set_allocated_string_arg(std::string* string_arg);
  private:
  const std::string& _internal_string_arg() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_string_arg(const std::string& value);
  std::string* _internal_mutable_string_arg();
  public:

  // optional .router.TorchTensorArg torch_tensor_arg = 14;
  bool has_torch_tensor_arg() const;
  private:
  bool _internal_has_torch_tensor_arg() const;
  public:
  void clear_torch_tensor_arg();
  const ::router::TorchTensorArg& torch_tensor_arg() const;
  PROTOBUF_NODISCARD ::router::TorchTensorArg* release_torch_tensor_arg();
  ::router::TorchTensorArg* mutable_torch_tensor_arg();
  void set_allocated_torch_tensor_arg(::router::TorchTensorArg* torch_tensor_arg);
  private:
  const ::router::TorchTensorArg& _internal_torch_tensor_arg() const;
  ::router::TorchTensorArg* _internal_mutable_torch_tensor_arg();
  public:
  void unsafe_arena_set_allocated_torch_tensor_arg(
      ::router::TorchTensorArg* torch_tensor_arg);
  ::router::TorchTensorArg* unsafe_arena_release_torch_tensor_arg();

  // optional double double_arg = 1;
  bool has_double_arg() const;
  private:
  bool _internal_has_double_arg() const;
  public:
  void clear_double_arg();
  double double_arg() const;
  void set_double_arg(double value);
  private:
  double _internal_double_arg() const;
  void _internal_set_double_arg(double value);
  public:

  // optional float float_arg = 2;
  bool has_float_arg() const;
  private:
  bool _internal_has_float_arg() const;
  public:
  void clear_float_arg();
  float float_arg() const;
  void set_float_arg(float value);
  private:
  float _internal_float_arg() const;
  void _internal_set_float_arg(float value);
  public:

  // optional int32 int32_arg = 3;
  bool has_int32_arg() const;
  private:
  bool _internal_has_int32_arg() const;
  public:
  void clear_int32_arg();
  int32_t int32_arg() const;
  void set_int32_arg(int32_t value);
  private:
  int32_t _internal_int32_arg() const;
  void _internal_set_int32_arg(int32_t value);
  public:

  // optional int64 int64_arg = 4;
  bool has_int64_arg() const;
  private:
  bool _internal_has_int64_arg() const;
  public:
  void clear_int64_arg();
  int64_t int64_arg() const;
  void set_int64_arg(int64_t value);
  private:
  int64_t _internal_int64_arg() const;
  void _internal_set_int64_arg(int64_t value);
  public:

  // optional uint64 uint64_arg = 5;
  bool has_uint64_arg() const;
  private:
  bool _internal_has_uint64_arg() const;
  public:
  void clear_uint64_arg();
  uint64_t uint64_arg() const;
  void set_uint64_arg(uint64_t value);
  private:
  uint64_t _internal_uint64_arg() const;
  void _internal_set_uint64_arg(uint64_t value);
  public:

  // optional sint64 sint64_arg = 7;
  bool has_sint64_arg() const;
  private:
  bool _internal_has_sint64_arg() const;
  public:
  void clear_sint64_arg();
  int64_t sint64_arg() const;
  void set_sint64_arg(int64_t value);
  private:
  int64_t _internal_sint64_arg() const;
  void _internal_set_sint64_arg(int64_t value);
  public:

  // optional sint32 sint32_arg = 6;
  bool has_sint32_arg() const;
  private:
  bool _internal_has_sint32_arg() const;
  public:
  void clear_sint32_arg();
  int32_t sint32_arg() const;
  void set_sint32_arg(int32_t value);
  private:
  int32_t _internal_sint32_arg() const;
  void _internal_set_sint32_arg(int32_t value);
  public:

  // optional fixed32 fixed32_arg = 8;
  bool has_fixed32_arg() const;
  private:
  bool _internal_has_fixed32_arg() const;
  public:
  void clear_fixed32_arg();
  uint32_t fixed32_arg() const;
  void set_fixed32_arg(uint32_t value);
  private:
  uint32_t _internal_fixed32_arg() const;
  void _internal_set_fixed32_arg(uint32_t value);
  public:

  // optional fixed64 fixed64_arg = 9;
  bool has_fixed64_arg() const;
  private:
  bool _internal_has_fixed64_arg() const;
  public:
  void clear_fixed64_arg();
  uint64_t fixed64_arg() const;
  void set_fixed64_arg(uint64_t value);
  private:
  uint64_t _internal_fixed64_arg() const;
  void _internal_set_fixed64_arg(uint64_t value);
  public:

  // optional sfixed64 sfixed64_arg = 11;
  bool has_sfixed64_arg() const;
  private:
  bool _internal_has_sfixed64_arg() const;
  public:
  void clear_sfixed64_arg();
  int64_t sfixed64_arg() const;
  void set_sfixed64_arg(int64_t value);
  private:
  int64_t _internal_sfixed64_arg() const;
  void _internal_set_sfixed64_arg(int64_t value);
  public:

  // optional sfixed32 sfixed32_arg = 10;
  bool has_sfixed32_arg() const;
  private:
  bool _internal_has_sfixed32_arg() const;
  public:
  void clear_sfixed32_arg();
  int32_t sfixed32_arg() const;
  void set_sfixed32_arg(int32_t value);
  private:
  int32_t _internal_sfixed32_arg() const;
  void _internal_set_sfixed32_arg(int32_t value);
  public:

  // optional bool bool_arg = 12;
  bool has_bool_arg() const;
  private:
  bool _internal_has_bool_arg() const;
  public:
  void clear_bool_arg();
  bool bool_arg() const;
  void set_bool_arg(bool value);
  private:
  bool _internal_bool_arg() const;
  void _internal_set_bool_arg(bool value);
  public:

  // required .router.ArgType arg_type = 15;
  bool has_arg_type() const;
  private:
  bool _internal_has_arg_type() const;
  public:
  void clear_arg_type();
  ::router::ArgType arg_type() const;
  void set_arg_type(::router::ArgType value);
  private:
  ::router::ArgType _internal_arg_type() const;
  void _internal_set_arg_type(::router::ArgType value);
  public:

  // @@protoc_insertion_point(class_scope:router.Arg)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr string_arg_;
  ::router::TorchTensorArg* torch_tensor_arg_;
  double double_arg_;
  float float_arg_;
  int32_t int32_arg_;
  int64_t int64_arg_;
  uint64_t uint64_arg_;
  int64_t sint64_arg_;
  int32_t sint32_arg_;
  uint32_t fixed32_arg_;
  uint64_t fixed64_arg_;
  int64_t sfixed64_arg_;
  int32_t sfixed32_arg_;
  bool bool_arg_;
  int arg_type_;
  friend struct ::TableStruct_router_2eproto;
};
// -------------------------------------------------------------------

class InferEnqueueArg final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:router.InferEnqueueArg) */ {
 public:
  inline InferEnqueueArg() : InferEnqueueArg(nullptr) {}
  ~InferEnqueueArg() override;
  explicit constexpr InferEnqueueArg(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  InferEnqueueArg(const InferEnqueueArg& from);
  InferEnqueueArg(InferEnqueueArg&& from) noexcept
    : InferEnqueueArg() {
    *this = ::std::move(from);
  }

  inline InferEnqueueArg& operator=(const InferEnqueueArg& from) {
    CopyFrom(from);
    return *this;
  }
  inline InferEnqueueArg& operator=(InferEnqueueArg&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const InferEnqueueArg& default_instance() {
    return *internal_default_instance();
  }
  static inline const InferEnqueueArg* internal_default_instance() {
    return reinterpret_cast<const InferEnqueueArg*>(
               &_InferEnqueueArg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(InferEnqueueArg& a, InferEnqueueArg& b) {
    a.Swap(&b);
  }
  inline void Swap(InferEnqueueArg* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InferEnqueueArg* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  InferEnqueueArg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<InferEnqueueArg>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const InferEnqueueArg& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const InferEnqueueArg& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InferEnqueueArg* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "router.InferEnqueueArg";
  }
  protected:
  explicit InferEnqueueArg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kArgsFieldNumber = 2,
    kHeaderFieldNumber = 1,
    kSloMsFieldNumber = 3,
  };
  // repeated .router.Arg args = 2;
  int args_size() const;
  private:
  int _internal_args_size() const;
  public:
  void clear_args();
  ::router::Arg* mutable_args(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::router::Arg >*
      mutable_args();
  private:
  const ::router::Arg& _internal_args(int index) const;
  ::router::Arg* _internal_add_args();
  public:
  const ::router::Arg& args(int index) const;
  ::router::Arg* add_args();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::router::Arg >&
      args() const;

  // required .router.RequestHeader header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::router::RequestHeader& header() const;
  PROTOBUF_NODISCARD ::router::RequestHeader* release_header();
  ::router::RequestHeader* mutable_header();
  void set_allocated_header(::router::RequestHeader* header);
  private:
  const ::router::RequestHeader& _internal_header() const;
  ::router::RequestHeader* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::router::RequestHeader* header);
  ::router::RequestHeader* unsafe_arena_release_header();

  // required int32 slo_ms = 3;
  bool has_slo_ms() const;
  private:
  bool _internal_has_slo_ms() const;
  public:
  void clear_slo_ms();
  int32_t slo_ms() const;
  void set_slo_ms(int32_t value);
  private:
  int32_t _internal_slo_ms() const;
  void _internal_set_slo_ms(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:router.InferEnqueueArg)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::router::Arg > args_;
  ::router::RequestHeader* header_;
  int32_t slo_ms_;
  friend struct ::TableStruct_router_2eproto;
};
// -------------------------------------------------------------------

class InferEnqueueReturn final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:router.InferEnqueueReturn) */ {
 public:
  inline InferEnqueueReturn() : InferEnqueueReturn(nullptr) {}
  ~InferEnqueueReturn() override;
  explicit constexpr InferEnqueueReturn(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  InferEnqueueReturn(const InferEnqueueReturn& from);
  InferEnqueueReturn(InferEnqueueReturn&& from) noexcept
    : InferEnqueueReturn() {
    *this = ::std::move(from);
  }

  inline InferEnqueueReturn& operator=(const InferEnqueueReturn& from) {
    CopyFrom(from);
    return *this;
  }
  inline InferEnqueueReturn& operator=(InferEnqueueReturn&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const InferEnqueueReturn& default_instance() {
    return *internal_default_instance();
  }
  static inline const InferEnqueueReturn* internal_default_instance() {
    return reinterpret_cast<const InferEnqueueReturn*>(
               &_InferEnqueueReturn_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(InferEnqueueReturn& a, InferEnqueueReturn& b) {
    a.Swap(&b);
  }
  inline void Swap(InferEnqueueReturn* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InferEnqueueReturn* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  InferEnqueueReturn* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<InferEnqueueReturn>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const InferEnqueueReturn& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const InferEnqueueReturn& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InferEnqueueReturn* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "router.InferEnqueueReturn";
  }
  protected:
  explicit InferEnqueueReturn(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kArgsFieldNumber = 2,
    kHeaderFieldNumber = 1,
  };
  // repeated .router.Arg args = 2;
  int args_size() const;
  private:
  int _internal_args_size() const;
  public:
  void clear_args();
  ::router::Arg* mutable_args(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::router::Arg >*
      mutable_args();
  private:
  const ::router::Arg& _internal_args(int index) const;
  ::router::Arg* _internal_add_args();
  public:
  const ::router::Arg& args(int index) const;
  ::router::Arg* add_args();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::router::Arg >&
      args() const;

  // required .router.ResponseHeader header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::router::ResponseHeader& header() const;
  PROTOBUF_NODISCARD ::router::ResponseHeader* release_header();
  ::router::ResponseHeader* mutable_header();
  void set_allocated_header(::router::ResponseHeader* header);
  private:
  const ::router::ResponseHeader& _internal_header() const;
  ::router::ResponseHeader* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::router::ResponseHeader* header);
  ::router::ResponseHeader* unsafe_arena_release_header();

  // @@protoc_insertion_point(class_scope:router.InferEnqueueReturn)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::router::Arg > args_;
  ::router::ResponseHeader* header_;
  friend struct ::TableStruct_router_2eproto;
};
// -------------------------------------------------------------------

class SubnetDimension final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:router.SubnetDimension) */ {
 public:
  inline SubnetDimension() : SubnetDimension(nullptr) {}
  ~SubnetDimension() override;
  explicit constexpr SubnetDimension(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SubnetDimension(const SubnetDimension& from);
  SubnetDimension(SubnetDimension&& from) noexcept
    : SubnetDimension() {
    *this = ::std::move(from);
  }

  inline SubnetDimension& operator=(const SubnetDimension& from) {
    CopyFrom(from);
    return *this;
  }
  inline SubnetDimension& operator=(SubnetDimension&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SubnetDimension& default_instance() {
    return *internal_default_instance();
  }
  static inline const SubnetDimension* internal_default_instance() {
    return reinterpret_cast<const SubnetDimension*>(
               &_SubnetDimension_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(SubnetDimension& a, SubnetDimension& b) {
    a.Swap(&b);
  }
  inline void Swap(SubnetDimension* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SubnetDimension* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SubnetDimension* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SubnetDimension>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SubnetDimension& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SubnetDimension& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SubnetDimension* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "router.SubnetDimension";
  }
  protected:
  explicit SubnetDimension(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDepthFieldNumber = 1,
    kElasticRatioFieldNumber = 2,
    kWidthMultiplierFieldNumber = 3,
  };
  // optional bytes depth = 1;
  bool has_depth() const;
  private:
  bool _internal_has_depth() const;
  public:
  void clear_depth();
  const std::string& depth() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_depth(ArgT0&& arg0, ArgT... args);
  std::string* mutable_depth();
  PROTOBUF_NODISCARD std::string* release_depth();
  void set_allocated_depth(std::string* depth);
  private:
  const std::string& _internal_depth() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_depth(const std::string& value);
  std::string* _internal_mutable_depth();
  public:

  // optional bytes elastic_ratio = 2;
  bool has_elastic_ratio() const;
  private:
  bool _internal_has_elastic_ratio() const;
  public:
  void clear_elastic_ratio();
  const std::string& elastic_ratio() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_elastic_ratio(ArgT0&& arg0, ArgT... args);
  std::string* mutable_elastic_ratio();
  PROTOBUF_NODISCARD std::string* release_elastic_ratio();
  void set_allocated_elastic_ratio(std::string* elastic_ratio);
  private:
  const std::string& _internal_elastic_ratio() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_elastic_ratio(const std::string& value);
  std::string* _internal_mutable_elastic_ratio();
  public:

  // optional bytes width_multiplier = 3;
  bool has_width_multiplier() const;
  private:
  bool _internal_has_width_multiplier() const;
  public:
  void clear_width_multiplier();
  const std::string& width_multiplier() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_width_multiplier(ArgT0&& arg0, ArgT... args);
  std::string* mutable_width_multiplier();
  PROTOBUF_NODISCARD std::string* release_width_multiplier();
  void set_allocated_width_multiplier(std::string* width_multiplier);
  private:
  const std::string& _internal_width_multiplier() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_width_multiplier(const std::string& value);
  std::string* _internal_mutable_width_multiplier();
  public:

  // @@protoc_insertion_point(class_scope:router.SubnetDimension)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr depth_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr elastic_ratio_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr width_multiplier_;
  friend struct ::TableStruct_router_2eproto;
};
// -------------------------------------------------------------------

class InferWorkerArg final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:router.InferWorkerArg) */ {
 public:
  inline InferWorkerArg() : InferWorkerArg(nullptr) {}
  ~InferWorkerArg() override;
  explicit constexpr InferWorkerArg(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  InferWorkerArg(const InferWorkerArg& from);
  InferWorkerArg(InferWorkerArg&& from) noexcept
    : InferWorkerArg() {
    *this = ::std::move(from);
  }

  inline InferWorkerArg& operator=(const InferWorkerArg& from) {
    CopyFrom(from);
    return *this;
  }
  inline InferWorkerArg& operator=(InferWorkerArg&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const InferWorkerArg& default_instance() {
    return *internal_default_instance();
  }
  static inline const InferWorkerArg* internal_default_instance() {
    return reinterpret_cast<const InferWorkerArg*>(
               &_InferWorkerArg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(InferWorkerArg& a, InferWorkerArg& b) {
    a.Swap(&b);
  }
  inline void Swap(InferWorkerArg* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InferWorkerArg* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  InferWorkerArg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<InferWorkerArg>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const InferWorkerArg& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const InferWorkerArg& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InferWorkerArg* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "router.InferWorkerArg";
  }
  protected:
  explicit InferWorkerArg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWorkerArgsFieldNumber = 1,
    kSubnetDimensionFieldNumber = 2,
  };
  // repeated .router.InferEnqueueArg worker_args = 1;
  int worker_args_size() const;
  private:
  int _internal_worker_args_size() const;
  public:
  void clear_worker_args();
  ::router::InferEnqueueArg* mutable_worker_args(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::router::InferEnqueueArg >*
      mutable_worker_args();
  private:
  const ::router::InferEnqueueArg& _internal_worker_args(int index) const;
  ::router::InferEnqueueArg* _internal_add_worker_args();
  public:
  const ::router::InferEnqueueArg& worker_args(int index) const;
  ::router::InferEnqueueArg* add_worker_args();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::router::InferEnqueueArg >&
      worker_args() const;

  // optional .router.SubnetDimension subnet_dimension = 2;
  bool has_subnet_dimension() const;
  private:
  bool _internal_has_subnet_dimension() const;
  public:
  void clear_subnet_dimension();
  const ::router::SubnetDimension& subnet_dimension() const;
  PROTOBUF_NODISCARD ::router::SubnetDimension* release_subnet_dimension();
  ::router::SubnetDimension* mutable_subnet_dimension();
  void set_allocated_subnet_dimension(::router::SubnetDimension* subnet_dimension);
  private:
  const ::router::SubnetDimension& _internal_subnet_dimension() const;
  ::router::SubnetDimension* _internal_mutable_subnet_dimension();
  public:
  void unsafe_arena_set_allocated_subnet_dimension(
      ::router::SubnetDimension* subnet_dimension);
  ::router::SubnetDimension* unsafe_arena_release_subnet_dimension();

  // @@protoc_insertion_point(class_scope:router.InferWorkerArg)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::router::InferEnqueueArg > worker_args_;
  ::router::SubnetDimension* subnet_dimension_;
  friend struct ::TableStruct_router_2eproto;
};
// -------------------------------------------------------------------

class InferWorkerReturn final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:router.InferWorkerReturn) */ {
 public:
  inline InferWorkerReturn() : InferWorkerReturn(nullptr) {}
  ~InferWorkerReturn() override;
  explicit constexpr InferWorkerReturn(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  InferWorkerReturn(const InferWorkerReturn& from);
  InferWorkerReturn(InferWorkerReturn&& from) noexcept
    : InferWorkerReturn() {
    *this = ::std::move(from);
  }

  inline InferWorkerReturn& operator=(const InferWorkerReturn& from) {
    CopyFrom(from);
    return *this;
  }
  inline InferWorkerReturn& operator=(InferWorkerReturn&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const InferWorkerReturn& default_instance() {
    return *internal_default_instance();
  }
  static inline const InferWorkerReturn* internal_default_instance() {
    return reinterpret_cast<const InferWorkerReturn*>(
               &_InferWorkerReturn_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(InferWorkerReturn& a, InferWorkerReturn& b) {
    a.Swap(&b);
  }
  inline void Swap(InferWorkerReturn* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InferWorkerReturn* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  InferWorkerReturn* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<InferWorkerReturn>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const InferWorkerReturn& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const InferWorkerReturn& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InferWorkerReturn* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "router.InferWorkerReturn";
  }
  protected:
  explicit InferWorkerReturn(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWorkerArgsFieldNumber = 1,
  };
  // repeated .router.InferEnqueueReturn worker_args = 1;
  int worker_args_size() const;
  private:
  int _internal_worker_args_size() const;
  public:
  void clear_worker_args();
  ::router::InferEnqueueReturn* mutable_worker_args(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::router::InferEnqueueReturn >*
      mutable_worker_args();
  private:
  const ::router::InferEnqueueReturn& _internal_worker_args(int index) const;
  ::router::InferEnqueueReturn* _internal_add_worker_args();
  public:
  const ::router::InferEnqueueReturn& worker_args(int index) const;
  ::router::InferEnqueueReturn* add_worker_args();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::router::InferEnqueueReturn >&
      worker_args() const;

  // @@protoc_insertion_point(class_scope:router.InferWorkerReturn)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::router::InferEnqueueReturn > worker_args_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_router_2eproto;
};
// -------------------------------------------------------------------

class LoadModelWorkerArg final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:router.LoadModelWorkerArg) */ {
 public:
  inline LoadModelWorkerArg() : LoadModelWorkerArg(nullptr) {}
  ~LoadModelWorkerArg() override;
  explicit constexpr LoadModelWorkerArg(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LoadModelWorkerArg(const LoadModelWorkerArg& from);
  LoadModelWorkerArg(LoadModelWorkerArg&& from) noexcept
    : LoadModelWorkerArg() {
    *this = ::std::move(from);
  }

  inline LoadModelWorkerArg& operator=(const LoadModelWorkerArg& from) {
    CopyFrom(from);
    return *this;
  }
  inline LoadModelWorkerArg& operator=(LoadModelWorkerArg&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LoadModelWorkerArg& default_instance() {
    return *internal_default_instance();
  }
  static inline const LoadModelWorkerArg* internal_default_instance() {
    return reinterpret_cast<const LoadModelWorkerArg*>(
               &_LoadModelWorkerArg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(LoadModelWorkerArg& a, LoadModelWorkerArg& b) {
    a.Swap(&b);
  }
  inline void Swap(LoadModelWorkerArg* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LoadModelWorkerArg* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LoadModelWorkerArg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LoadModelWorkerArg>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LoadModelWorkerArg& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const LoadModelWorkerArg& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LoadModelWorkerArg* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "router.LoadModelWorkerArg";
  }
  protected:
  explicit LoadModelWorkerArg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kModelPathFieldNumber = 1,
  };
  // required string model_path = 1;
  bool has_model_path() const;
  private:
  bool _internal_has_model_path() const;
  public:
  void clear_model_path();
  const std::string& model_path() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_model_path(ArgT0&& arg0, ArgT... args);
  std::string* mutable_model_path();
  PROTOBUF_NODISCARD std::string* release_model_path();
  void set_allocated_model_path(std::string* model_path);
  private:
  const std::string& _internal_model_path() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_model_path(const std::string& value);
  std::string* _internal_mutable_model_path();
  public:

  // @@protoc_insertion_point(class_scope:router.LoadModelWorkerArg)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr model_path_;
  friend struct ::TableStruct_router_2eproto;
};
// -------------------------------------------------------------------

class LoadModelWorkerReturn final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:router.LoadModelWorkerReturn) */ {
 public:
  inline LoadModelWorkerReturn() : LoadModelWorkerReturn(nullptr) {}
  ~LoadModelWorkerReturn() override;
  explicit constexpr LoadModelWorkerReturn(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LoadModelWorkerReturn(const LoadModelWorkerReturn& from);
  LoadModelWorkerReturn(LoadModelWorkerReturn&& from) noexcept
    : LoadModelWorkerReturn() {
    *this = ::std::move(from);
  }

  inline LoadModelWorkerReturn& operator=(const LoadModelWorkerReturn& from) {
    CopyFrom(from);
    return *this;
  }
  inline LoadModelWorkerReturn& operator=(LoadModelWorkerReturn&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LoadModelWorkerReturn& default_instance() {
    return *internal_default_instance();
  }
  static inline const LoadModelWorkerReturn* internal_default_instance() {
    return reinterpret_cast<const LoadModelWorkerReturn*>(
               &_LoadModelWorkerReturn_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(LoadModelWorkerReturn& a, LoadModelWorkerReturn& b) {
    a.Swap(&b);
  }
  inline void Swap(LoadModelWorkerReturn* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LoadModelWorkerReturn* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LoadModelWorkerReturn* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LoadModelWorkerReturn>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LoadModelWorkerReturn& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const LoadModelWorkerReturn& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LoadModelWorkerReturn* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "router.LoadModelWorkerReturn";
  }
  protected:
  explicit LoadModelWorkerReturn(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
  };
  // required int32 status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  int32_t status() const;
  void set_status(int32_t value);
  private:
  int32_t _internal_status() const;
  void _internal_set_status(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:router.LoadModelWorkerReturn)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int32_t status_;
  friend struct ::TableStruct_router_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// RequestHeader

// required int32 user_id = 1;
inline bool RequestHeader::_internal_has_user_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool RequestHeader::has_user_id() const {
  return _internal_has_user_id();
}
inline void RequestHeader::clear_user_id() {
  user_id_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline int32_t RequestHeader::_internal_user_id() const {
  return user_id_;
}
inline int32_t RequestHeader::user_id() const {
  // @@protoc_insertion_point(field_get:router.RequestHeader.user_id)
  return _internal_user_id();
}
inline void RequestHeader::_internal_set_user_id(int32_t value) {
  _has_bits_[0] |= 0x00000001u;
  user_id_ = value;
}
inline void RequestHeader::set_user_id(int32_t value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:router.RequestHeader.user_id)
}

// optional int32 user_request_id = 2;
inline bool RequestHeader::_internal_has_user_request_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool RequestHeader::has_user_request_id() const {
  return _internal_has_user_request_id();
}
inline void RequestHeader::clear_user_request_id() {
  user_request_id_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline int32_t RequestHeader::_internal_user_request_id() const {
  return user_request_id_;
}
inline int32_t RequestHeader::user_request_id() const {
  // @@protoc_insertion_point(field_get:router.RequestHeader.user_request_id)
  return _internal_user_request_id();
}
inline void RequestHeader::_internal_set_user_request_id(int32_t value) {
  _has_bits_[0] |= 0x00000002u;
  user_request_id_ = value;
}
inline void RequestHeader::set_user_request_id(int32_t value) {
  _internal_set_user_request_id(value);
  // @@protoc_insertion_point(field_set:router.RequestHeader.user_request_id)
}

// -------------------------------------------------------------------

// ResponseHeader

// optional int32 user_request_id = 1;
inline bool ResponseHeader::_internal_has_user_request_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ResponseHeader::has_user_request_id() const {
  return _internal_has_user_request_id();
}
inline void ResponseHeader::clear_user_request_id() {
  user_request_id_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline int32_t ResponseHeader::_internal_user_request_id() const {
  return user_request_id_;
}
inline int32_t ResponseHeader::user_request_id() const {
  // @@protoc_insertion_point(field_get:router.ResponseHeader.user_request_id)
  return _internal_user_request_id();
}
inline void ResponseHeader::_internal_set_user_request_id(int32_t value) {
  _has_bits_[0] |= 0x00000001u;
  user_request_id_ = value;
}
inline void ResponseHeader::set_user_request_id(int32_t value) {
  _internal_set_user_request_id(value);
  // @@protoc_insertion_point(field_set:router.ResponseHeader.user_request_id)
}

// optional int32 status = 2;
inline bool ResponseHeader::_internal_has_status() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ResponseHeader::has_status() const {
  return _internal_has_status();
}
inline void ResponseHeader::clear_status() {
  status_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline int32_t ResponseHeader::_internal_status() const {
  return status_;
}
inline int32_t ResponseHeader::status() const {
  // @@protoc_insertion_point(field_get:router.ResponseHeader.status)
  return _internal_status();
}
inline void ResponseHeader::_internal_set_status(int32_t value) {
  _has_bits_[0] |= 0x00000002u;
  status_ = value;
}
inline void ResponseHeader::set_status(int32_t value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:router.ResponseHeader.status)
}

// -------------------------------------------------------------------

// SetRouterSpecArg

// required .router.RequestHeader header = 1;
inline bool SetRouterSpecArg::_internal_has_header() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || header_ != nullptr);
  return value;
}
inline bool SetRouterSpecArg::has_header() const {
  return _internal_has_header();
}
inline void SetRouterSpecArg::clear_header() {
  if (header_ != nullptr) header_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::router::RequestHeader& SetRouterSpecArg::_internal_header() const {
  const ::router::RequestHeader* p = header_;
  return p != nullptr ? *p : reinterpret_cast<const ::router::RequestHeader&>(
      ::router::_RequestHeader_default_instance_);
}
inline const ::router::RequestHeader& SetRouterSpecArg::header() const {
  // @@protoc_insertion_point(field_get:router.SetRouterSpecArg.header)
  return _internal_header();
}
inline void SetRouterSpecArg::unsafe_arena_set_allocated_header(
    ::router::RequestHeader* header) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  header_ = header;
  if (header) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:router.SetRouterSpecArg.header)
}
inline ::router::RequestHeader* SetRouterSpecArg::release_header() {
  _has_bits_[0] &= ~0x00000001u;
  ::router::RequestHeader* temp = header_;
  header_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::router::RequestHeader* SetRouterSpecArg::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:router.SetRouterSpecArg.header)
  _has_bits_[0] &= ~0x00000001u;
  ::router::RequestHeader* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::router::RequestHeader* SetRouterSpecArg::_internal_mutable_header() {
  _has_bits_[0] |= 0x00000001u;
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::router::RequestHeader>(GetArenaForAllocation());
    header_ = p;
  }
  return header_;
}
inline ::router::RequestHeader* SetRouterSpecArg::mutable_header() {
  ::router::RequestHeader* _msg = _internal_mutable_header();
  // @@protoc_insertion_point(field_mutable:router.SetRouterSpecArg.header)
  return _msg;
}
inline void SetRouterSpecArg::set_allocated_header(::router::RequestHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete header_;
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::router::RequestHeader>::GetOwningArena(header);
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:router.SetRouterSpecArg.header)
}

// optional int32 max_batch_size = 2;
inline bool SetRouterSpecArg::_internal_has_max_batch_size() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool SetRouterSpecArg::has_max_batch_size() const {
  return _internal_has_max_batch_size();
}
inline void SetRouterSpecArg::clear_max_batch_size() {
  max_batch_size_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline int32_t SetRouterSpecArg::_internal_max_batch_size() const {
  return max_batch_size_;
}
inline int32_t SetRouterSpecArg::max_batch_size() const {
  // @@protoc_insertion_point(field_get:router.SetRouterSpecArg.max_batch_size)
  return _internal_max_batch_size();
}
inline void SetRouterSpecArg::_internal_set_max_batch_size(int32_t value) {
  _has_bits_[0] |= 0x00000002u;
  max_batch_size_ = value;
}
inline void SetRouterSpecArg::set_max_batch_size(int32_t value) {
  _internal_set_max_batch_size(value);
  // @@protoc_insertion_point(field_set:router.SetRouterSpecArg.max_batch_size)
}

// -------------------------------------------------------------------

// SetRouterSpecReturn

// required .router.ResponseHeader header = 1;
inline bool SetRouterSpecReturn::_internal_has_header() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || header_ != nullptr);
  return value;
}
inline bool SetRouterSpecReturn::has_header() const {
  return _internal_has_header();
}
inline void SetRouterSpecReturn::clear_header() {
  if (header_ != nullptr) header_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::router::ResponseHeader& SetRouterSpecReturn::_internal_header() const {
  const ::router::ResponseHeader* p = header_;
  return p != nullptr ? *p : reinterpret_cast<const ::router::ResponseHeader&>(
      ::router::_ResponseHeader_default_instance_);
}
inline const ::router::ResponseHeader& SetRouterSpecReturn::header() const {
  // @@protoc_insertion_point(field_get:router.SetRouterSpecReturn.header)
  return _internal_header();
}
inline void SetRouterSpecReturn::unsafe_arena_set_allocated_header(
    ::router::ResponseHeader* header) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  header_ = header;
  if (header) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:router.SetRouterSpecReturn.header)
}
inline ::router::ResponseHeader* SetRouterSpecReturn::release_header() {
  _has_bits_[0] &= ~0x00000001u;
  ::router::ResponseHeader* temp = header_;
  header_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::router::ResponseHeader* SetRouterSpecReturn::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:router.SetRouterSpecReturn.header)
  _has_bits_[0] &= ~0x00000001u;
  ::router::ResponseHeader* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::router::ResponseHeader* SetRouterSpecReturn::_internal_mutable_header() {
  _has_bits_[0] |= 0x00000001u;
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::router::ResponseHeader>(GetArenaForAllocation());
    header_ = p;
  }
  return header_;
}
inline ::router::ResponseHeader* SetRouterSpecReturn::mutable_header() {
  ::router::ResponseHeader* _msg = _internal_mutable_header();
  // @@protoc_insertion_point(field_mutable:router.SetRouterSpecReturn.header)
  return _msg;
}
inline void SetRouterSpecReturn::set_allocated_header(::router::ResponseHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete header_;
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::router::ResponseHeader>::GetOwningArena(header);
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:router.SetRouterSpecReturn.header)
}

// -------------------------------------------------------------------

// TorchTensorArg

// required bytes byte_data = 1;
inline bool TorchTensorArg::_internal_has_byte_data() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool TorchTensorArg::has_byte_data() const {
  return _internal_has_byte_data();
}
inline void TorchTensorArg::clear_byte_data() {
  byte_data_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& TorchTensorArg::byte_data() const {
  // @@protoc_insertion_point(field_get:router.TorchTensorArg.byte_data)
  return _internal_byte_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TorchTensorArg::set_byte_data(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 byte_data_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:router.TorchTensorArg.byte_data)
}
inline std::string* TorchTensorArg::mutable_byte_data() {
  std::string* _s = _internal_mutable_byte_data();
  // @@protoc_insertion_point(field_mutable:router.TorchTensorArg.byte_data)
  return _s;
}
inline const std::string& TorchTensorArg::_internal_byte_data() const {
  return byte_data_.Get();
}
inline void TorchTensorArg::_internal_set_byte_data(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  byte_data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* TorchTensorArg::_internal_mutable_byte_data() {
  _has_bits_[0] |= 0x00000001u;
  return byte_data_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* TorchTensorArg::release_byte_data() {
  // @@protoc_insertion_point(field_release:router.TorchTensorArg.byte_data)
  if (!_internal_has_byte_data()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = byte_data_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (byte_data_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    byte_data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void TorchTensorArg::set_allocated_byte_data(std::string* byte_data) {
  if (byte_data != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  byte_data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), byte_data,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (byte_data_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    byte_data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:router.TorchTensorArg.byte_data)
}

// -------------------------------------------------------------------

// Arg

// optional double double_arg = 1;
inline bool Arg::_internal_has_double_arg() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Arg::has_double_arg() const {
  return _internal_has_double_arg();
}
inline void Arg::clear_double_arg() {
  double_arg_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline double Arg::_internal_double_arg() const {
  return double_arg_;
}
inline double Arg::double_arg() const {
  // @@protoc_insertion_point(field_get:router.Arg.double_arg)
  return _internal_double_arg();
}
inline void Arg::_internal_set_double_arg(double value) {
  _has_bits_[0] |= 0x00000004u;
  double_arg_ = value;
}
inline void Arg::set_double_arg(double value) {
  _internal_set_double_arg(value);
  // @@protoc_insertion_point(field_set:router.Arg.double_arg)
}

// optional float float_arg = 2;
inline bool Arg::_internal_has_float_arg() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Arg::has_float_arg() const {
  return _internal_has_float_arg();
}
inline void Arg::clear_float_arg() {
  float_arg_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline float Arg::_internal_float_arg() const {
  return float_arg_;
}
inline float Arg::float_arg() const {
  // @@protoc_insertion_point(field_get:router.Arg.float_arg)
  return _internal_float_arg();
}
inline void Arg::_internal_set_float_arg(float value) {
  _has_bits_[0] |= 0x00000008u;
  float_arg_ = value;
}
inline void Arg::set_float_arg(float value) {
  _internal_set_float_arg(value);
  // @@protoc_insertion_point(field_set:router.Arg.float_arg)
}

// optional int32 int32_arg = 3;
inline bool Arg::_internal_has_int32_arg() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool Arg::has_int32_arg() const {
  return _internal_has_int32_arg();
}
inline void Arg::clear_int32_arg() {
  int32_arg_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline int32_t Arg::_internal_int32_arg() const {
  return int32_arg_;
}
inline int32_t Arg::int32_arg() const {
  // @@protoc_insertion_point(field_get:router.Arg.int32_arg)
  return _internal_int32_arg();
}
inline void Arg::_internal_set_int32_arg(int32_t value) {
  _has_bits_[0] |= 0x00000010u;
  int32_arg_ = value;
}
inline void Arg::set_int32_arg(int32_t value) {
  _internal_set_int32_arg(value);
  // @@protoc_insertion_point(field_set:router.Arg.int32_arg)
}

// optional int64 int64_arg = 4;
inline bool Arg::_internal_has_int64_arg() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool Arg::has_int64_arg() const {
  return _internal_has_int64_arg();
}
inline void Arg::clear_int64_arg() {
  int64_arg_ = int64_t{0};
  _has_bits_[0] &= ~0x00000020u;
}
inline int64_t Arg::_internal_int64_arg() const {
  return int64_arg_;
}
inline int64_t Arg::int64_arg() const {
  // @@protoc_insertion_point(field_get:router.Arg.int64_arg)
  return _internal_int64_arg();
}
inline void Arg::_internal_set_int64_arg(int64_t value) {
  _has_bits_[0] |= 0x00000020u;
  int64_arg_ = value;
}
inline void Arg::set_int64_arg(int64_t value) {
  _internal_set_int64_arg(value);
  // @@protoc_insertion_point(field_set:router.Arg.int64_arg)
}

// optional uint64 uint64_arg = 5;
inline bool Arg::_internal_has_uint64_arg() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool Arg::has_uint64_arg() const {
  return _internal_has_uint64_arg();
}
inline void Arg::clear_uint64_arg() {
  uint64_arg_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000040u;
}
inline uint64_t Arg::_internal_uint64_arg() const {
  return uint64_arg_;
}
inline uint64_t Arg::uint64_arg() const {
  // @@protoc_insertion_point(field_get:router.Arg.uint64_arg)
  return _internal_uint64_arg();
}
inline void Arg::_internal_set_uint64_arg(uint64_t value) {
  _has_bits_[0] |= 0x00000040u;
  uint64_arg_ = value;
}
inline void Arg::set_uint64_arg(uint64_t value) {
  _internal_set_uint64_arg(value);
  // @@protoc_insertion_point(field_set:router.Arg.uint64_arg)
}

// optional sint32 sint32_arg = 6;
inline bool Arg::_internal_has_sint32_arg() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool Arg::has_sint32_arg() const {
  return _internal_has_sint32_arg();
}
inline void Arg::clear_sint32_arg() {
  sint32_arg_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline int32_t Arg::_internal_sint32_arg() const {
  return sint32_arg_;
}
inline int32_t Arg::sint32_arg() const {
  // @@protoc_insertion_point(field_get:router.Arg.sint32_arg)
  return _internal_sint32_arg();
}
inline void Arg::_internal_set_sint32_arg(int32_t value) {
  _has_bits_[0] |= 0x00000100u;
  sint32_arg_ = value;
}
inline void Arg::set_sint32_arg(int32_t value) {
  _internal_set_sint32_arg(value);
  // @@protoc_insertion_point(field_set:router.Arg.sint32_arg)
}

// optional sint64 sint64_arg = 7;
inline bool Arg::_internal_has_sint64_arg() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool Arg::has_sint64_arg() const {
  return _internal_has_sint64_arg();
}
inline void Arg::clear_sint64_arg() {
  sint64_arg_ = int64_t{0};
  _has_bits_[0] &= ~0x00000080u;
}
inline int64_t Arg::_internal_sint64_arg() const {
  return sint64_arg_;
}
inline int64_t Arg::sint64_arg() const {
  // @@protoc_insertion_point(field_get:router.Arg.sint64_arg)
  return _internal_sint64_arg();
}
inline void Arg::_internal_set_sint64_arg(int64_t value) {
  _has_bits_[0] |= 0x00000080u;
  sint64_arg_ = value;
}
inline void Arg::set_sint64_arg(int64_t value) {
  _internal_set_sint64_arg(value);
  // @@protoc_insertion_point(field_set:router.Arg.sint64_arg)
}

// optional fixed32 fixed32_arg = 8;
inline bool Arg::_internal_has_fixed32_arg() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool Arg::has_fixed32_arg() const {
  return _internal_has_fixed32_arg();
}
inline void Arg::clear_fixed32_arg() {
  fixed32_arg_ = 0u;
  _has_bits_[0] &= ~0x00000200u;
}
inline uint32_t Arg::_internal_fixed32_arg() const {
  return fixed32_arg_;
}
inline uint32_t Arg::fixed32_arg() const {
  // @@protoc_insertion_point(field_get:router.Arg.fixed32_arg)
  return _internal_fixed32_arg();
}
inline void Arg::_internal_set_fixed32_arg(uint32_t value) {
  _has_bits_[0] |= 0x00000200u;
  fixed32_arg_ = value;
}
inline void Arg::set_fixed32_arg(uint32_t value) {
  _internal_set_fixed32_arg(value);
  // @@protoc_insertion_point(field_set:router.Arg.fixed32_arg)
}

// optional fixed64 fixed64_arg = 9;
inline bool Arg::_internal_has_fixed64_arg() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool Arg::has_fixed64_arg() const {
  return _internal_has_fixed64_arg();
}
inline void Arg::clear_fixed64_arg() {
  fixed64_arg_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000400u;
}
inline uint64_t Arg::_internal_fixed64_arg() const {
  return fixed64_arg_;
}
inline uint64_t Arg::fixed64_arg() const {
  // @@protoc_insertion_point(field_get:router.Arg.fixed64_arg)
  return _internal_fixed64_arg();
}
inline void Arg::_internal_set_fixed64_arg(uint64_t value) {
  _has_bits_[0] |= 0x00000400u;
  fixed64_arg_ = value;
}
inline void Arg::set_fixed64_arg(uint64_t value) {
  _internal_set_fixed64_arg(value);
  // @@protoc_insertion_point(field_set:router.Arg.fixed64_arg)
}

// optional sfixed32 sfixed32_arg = 10;
inline bool Arg::_internal_has_sfixed32_arg() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool Arg::has_sfixed32_arg() const {
  return _internal_has_sfixed32_arg();
}
inline void Arg::clear_sfixed32_arg() {
  sfixed32_arg_ = 0;
  _has_bits_[0] &= ~0x00001000u;
}
inline int32_t Arg::_internal_sfixed32_arg() const {
  return sfixed32_arg_;
}
inline int32_t Arg::sfixed32_arg() const {
  // @@protoc_insertion_point(field_get:router.Arg.sfixed32_arg)
  return _internal_sfixed32_arg();
}
inline void Arg::_internal_set_sfixed32_arg(int32_t value) {
  _has_bits_[0] |= 0x00001000u;
  sfixed32_arg_ = value;
}
inline void Arg::set_sfixed32_arg(int32_t value) {
  _internal_set_sfixed32_arg(value);
  // @@protoc_insertion_point(field_set:router.Arg.sfixed32_arg)
}

// optional sfixed64 sfixed64_arg = 11;
inline bool Arg::_internal_has_sfixed64_arg() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool Arg::has_sfixed64_arg() const {
  return _internal_has_sfixed64_arg();
}
inline void Arg::clear_sfixed64_arg() {
  sfixed64_arg_ = int64_t{0};
  _has_bits_[0] &= ~0x00000800u;
}
inline int64_t Arg::_internal_sfixed64_arg() const {
  return sfixed64_arg_;
}
inline int64_t Arg::sfixed64_arg() const {
  // @@protoc_insertion_point(field_get:router.Arg.sfixed64_arg)
  return _internal_sfixed64_arg();
}
inline void Arg::_internal_set_sfixed64_arg(int64_t value) {
  _has_bits_[0] |= 0x00000800u;
  sfixed64_arg_ = value;
}
inline void Arg::set_sfixed64_arg(int64_t value) {
  _internal_set_sfixed64_arg(value);
  // @@protoc_insertion_point(field_set:router.Arg.sfixed64_arg)
}

// optional bool bool_arg = 12;
inline bool Arg::_internal_has_bool_arg() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool Arg::has_bool_arg() const {
  return _internal_has_bool_arg();
}
inline void Arg::clear_bool_arg() {
  bool_arg_ = false;
  _has_bits_[0] &= ~0x00002000u;
}
inline bool Arg::_internal_bool_arg() const {
  return bool_arg_;
}
inline bool Arg::bool_arg() const {
  // @@protoc_insertion_point(field_get:router.Arg.bool_arg)
  return _internal_bool_arg();
}
inline void Arg::_internal_set_bool_arg(bool value) {
  _has_bits_[0] |= 0x00002000u;
  bool_arg_ = value;
}
inline void Arg::set_bool_arg(bool value) {
  _internal_set_bool_arg(value);
  // @@protoc_insertion_point(field_set:router.Arg.bool_arg)
}

// optional string string_arg = 13;
inline bool Arg::_internal_has_string_arg() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Arg::has_string_arg() const {
  return _internal_has_string_arg();
}
inline void Arg::clear_string_arg() {
  string_arg_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Arg::string_arg() const {
  // @@protoc_insertion_point(field_get:router.Arg.string_arg)
  return _internal_string_arg();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Arg::set_string_arg(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 string_arg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:router.Arg.string_arg)
}
inline std::string* Arg::mutable_string_arg() {
  std::string* _s = _internal_mutable_string_arg();
  // @@protoc_insertion_point(field_mutable:router.Arg.string_arg)
  return _s;
}
inline const std::string& Arg::_internal_string_arg() const {
  return string_arg_.Get();
}
inline void Arg::_internal_set_string_arg(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  string_arg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Arg::_internal_mutable_string_arg() {
  _has_bits_[0] |= 0x00000001u;
  return string_arg_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Arg::release_string_arg() {
  // @@protoc_insertion_point(field_release:router.Arg.string_arg)
  if (!_internal_has_string_arg()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = string_arg_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (string_arg_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    string_arg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Arg::set_allocated_string_arg(std::string* string_arg) {
  if (string_arg != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  string_arg_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), string_arg,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (string_arg_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    string_arg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:router.Arg.string_arg)
}

// optional .router.TorchTensorArg torch_tensor_arg = 14;
inline bool Arg::_internal_has_torch_tensor_arg() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || torch_tensor_arg_ != nullptr);
  return value;
}
inline bool Arg::has_torch_tensor_arg() const {
  return _internal_has_torch_tensor_arg();
}
inline void Arg::clear_torch_tensor_arg() {
  if (torch_tensor_arg_ != nullptr) torch_tensor_arg_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::router::TorchTensorArg& Arg::_internal_torch_tensor_arg() const {
  const ::router::TorchTensorArg* p = torch_tensor_arg_;
  return p != nullptr ? *p : reinterpret_cast<const ::router::TorchTensorArg&>(
      ::router::_TorchTensorArg_default_instance_);
}
inline const ::router::TorchTensorArg& Arg::torch_tensor_arg() const {
  // @@protoc_insertion_point(field_get:router.Arg.torch_tensor_arg)
  return _internal_torch_tensor_arg();
}
inline void Arg::unsafe_arena_set_allocated_torch_tensor_arg(
    ::router::TorchTensorArg* torch_tensor_arg) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(torch_tensor_arg_);
  }
  torch_tensor_arg_ = torch_tensor_arg;
  if (torch_tensor_arg) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:router.Arg.torch_tensor_arg)
}
inline ::router::TorchTensorArg* Arg::release_torch_tensor_arg() {
  _has_bits_[0] &= ~0x00000002u;
  ::router::TorchTensorArg* temp = torch_tensor_arg_;
  torch_tensor_arg_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::router::TorchTensorArg* Arg::unsafe_arena_release_torch_tensor_arg() {
  // @@protoc_insertion_point(field_release:router.Arg.torch_tensor_arg)
  _has_bits_[0] &= ~0x00000002u;
  ::router::TorchTensorArg* temp = torch_tensor_arg_;
  torch_tensor_arg_ = nullptr;
  return temp;
}
inline ::router::TorchTensorArg* Arg::_internal_mutable_torch_tensor_arg() {
  _has_bits_[0] |= 0x00000002u;
  if (torch_tensor_arg_ == nullptr) {
    auto* p = CreateMaybeMessage<::router::TorchTensorArg>(GetArenaForAllocation());
    torch_tensor_arg_ = p;
  }
  return torch_tensor_arg_;
}
inline ::router::TorchTensorArg* Arg::mutable_torch_tensor_arg() {
  ::router::TorchTensorArg* _msg = _internal_mutable_torch_tensor_arg();
  // @@protoc_insertion_point(field_mutable:router.Arg.torch_tensor_arg)
  return _msg;
}
inline void Arg::set_allocated_torch_tensor_arg(::router::TorchTensorArg* torch_tensor_arg) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete torch_tensor_arg_;
  }
  if (torch_tensor_arg) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::router::TorchTensorArg>::GetOwningArena(torch_tensor_arg);
    if (message_arena != submessage_arena) {
      torch_tensor_arg = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, torch_tensor_arg, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  torch_tensor_arg_ = torch_tensor_arg;
  // @@protoc_insertion_point(field_set_allocated:router.Arg.torch_tensor_arg)
}

// required .router.ArgType arg_type = 15;
inline bool Arg::_internal_has_arg_type() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool Arg::has_arg_type() const {
  return _internal_has_arg_type();
}
inline void Arg::clear_arg_type() {
  arg_type_ = 1;
  _has_bits_[0] &= ~0x00004000u;
}
inline ::router::ArgType Arg::_internal_arg_type() const {
  return static_cast< ::router::ArgType >(arg_type_);
}
inline ::router::ArgType Arg::arg_type() const {
  // @@protoc_insertion_point(field_get:router.Arg.arg_type)
  return _internal_arg_type();
}
inline void Arg::_internal_set_arg_type(::router::ArgType value) {
  assert(::router::ArgType_IsValid(value));
  _has_bits_[0] |= 0x00004000u;
  arg_type_ = value;
}
inline void Arg::set_arg_type(::router::ArgType value) {
  _internal_set_arg_type(value);
  // @@protoc_insertion_point(field_set:router.Arg.arg_type)
}

// -------------------------------------------------------------------

// InferEnqueueArg

// required .router.RequestHeader header = 1;
inline bool InferEnqueueArg::_internal_has_header() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || header_ != nullptr);
  return value;
}
inline bool InferEnqueueArg::has_header() const {
  return _internal_has_header();
}
inline void InferEnqueueArg::clear_header() {
  if (header_ != nullptr) header_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::router::RequestHeader& InferEnqueueArg::_internal_header() const {
  const ::router::RequestHeader* p = header_;
  return p != nullptr ? *p : reinterpret_cast<const ::router::RequestHeader&>(
      ::router::_RequestHeader_default_instance_);
}
inline const ::router::RequestHeader& InferEnqueueArg::header() const {
  // @@protoc_insertion_point(field_get:router.InferEnqueueArg.header)
  return _internal_header();
}
inline void InferEnqueueArg::unsafe_arena_set_allocated_header(
    ::router::RequestHeader* header) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  header_ = header;
  if (header) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:router.InferEnqueueArg.header)
}
inline ::router::RequestHeader* InferEnqueueArg::release_header() {
  _has_bits_[0] &= ~0x00000001u;
  ::router::RequestHeader* temp = header_;
  header_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::router::RequestHeader* InferEnqueueArg::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:router.InferEnqueueArg.header)
  _has_bits_[0] &= ~0x00000001u;
  ::router::RequestHeader* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::router::RequestHeader* InferEnqueueArg::_internal_mutable_header() {
  _has_bits_[0] |= 0x00000001u;
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::router::RequestHeader>(GetArenaForAllocation());
    header_ = p;
  }
  return header_;
}
inline ::router::RequestHeader* InferEnqueueArg::mutable_header() {
  ::router::RequestHeader* _msg = _internal_mutable_header();
  // @@protoc_insertion_point(field_mutable:router.InferEnqueueArg.header)
  return _msg;
}
inline void InferEnqueueArg::set_allocated_header(::router::RequestHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete header_;
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::router::RequestHeader>::GetOwningArena(header);
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:router.InferEnqueueArg.header)
}

// repeated .router.Arg args = 2;
inline int InferEnqueueArg::_internal_args_size() const {
  return args_.size();
}
inline int InferEnqueueArg::args_size() const {
  return _internal_args_size();
}
inline void InferEnqueueArg::clear_args() {
  args_.Clear();
}
inline ::router::Arg* InferEnqueueArg::mutable_args(int index) {
  // @@protoc_insertion_point(field_mutable:router.InferEnqueueArg.args)
  return args_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::router::Arg >*
InferEnqueueArg::mutable_args() {
  // @@protoc_insertion_point(field_mutable_list:router.InferEnqueueArg.args)
  return &args_;
}
inline const ::router::Arg& InferEnqueueArg::_internal_args(int index) const {
  return args_.Get(index);
}
inline const ::router::Arg& InferEnqueueArg::args(int index) const {
  // @@protoc_insertion_point(field_get:router.InferEnqueueArg.args)
  return _internal_args(index);
}
inline ::router::Arg* InferEnqueueArg::_internal_add_args() {
  return args_.Add();
}
inline ::router::Arg* InferEnqueueArg::add_args() {
  ::router::Arg* _add = _internal_add_args();
  // @@protoc_insertion_point(field_add:router.InferEnqueueArg.args)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::router::Arg >&
InferEnqueueArg::args() const {
  // @@protoc_insertion_point(field_list:router.InferEnqueueArg.args)
  return args_;
}

// required int32 slo_ms = 3;
inline bool InferEnqueueArg::_internal_has_slo_ms() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool InferEnqueueArg::has_slo_ms() const {
  return _internal_has_slo_ms();
}
inline void InferEnqueueArg::clear_slo_ms() {
  slo_ms_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline int32_t InferEnqueueArg::_internal_slo_ms() const {
  return slo_ms_;
}
inline int32_t InferEnqueueArg::slo_ms() const {
  // @@protoc_insertion_point(field_get:router.InferEnqueueArg.slo_ms)
  return _internal_slo_ms();
}
inline void InferEnqueueArg::_internal_set_slo_ms(int32_t value) {
  _has_bits_[0] |= 0x00000002u;
  slo_ms_ = value;
}
inline void InferEnqueueArg::set_slo_ms(int32_t value) {
  _internal_set_slo_ms(value);
  // @@protoc_insertion_point(field_set:router.InferEnqueueArg.slo_ms)
}

// -------------------------------------------------------------------

// InferEnqueueReturn

// required .router.ResponseHeader header = 1;
inline bool InferEnqueueReturn::_internal_has_header() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || header_ != nullptr);
  return value;
}
inline bool InferEnqueueReturn::has_header() const {
  return _internal_has_header();
}
inline void InferEnqueueReturn::clear_header() {
  if (header_ != nullptr) header_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::router::ResponseHeader& InferEnqueueReturn::_internal_header() const {
  const ::router::ResponseHeader* p = header_;
  return p != nullptr ? *p : reinterpret_cast<const ::router::ResponseHeader&>(
      ::router::_ResponseHeader_default_instance_);
}
inline const ::router::ResponseHeader& InferEnqueueReturn::header() const {
  // @@protoc_insertion_point(field_get:router.InferEnqueueReturn.header)
  return _internal_header();
}
inline void InferEnqueueReturn::unsafe_arena_set_allocated_header(
    ::router::ResponseHeader* header) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  header_ = header;
  if (header) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:router.InferEnqueueReturn.header)
}
inline ::router::ResponseHeader* InferEnqueueReturn::release_header() {
  _has_bits_[0] &= ~0x00000001u;
  ::router::ResponseHeader* temp = header_;
  header_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::router::ResponseHeader* InferEnqueueReturn::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:router.InferEnqueueReturn.header)
  _has_bits_[0] &= ~0x00000001u;
  ::router::ResponseHeader* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::router::ResponseHeader* InferEnqueueReturn::_internal_mutable_header() {
  _has_bits_[0] |= 0x00000001u;
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::router::ResponseHeader>(GetArenaForAllocation());
    header_ = p;
  }
  return header_;
}
inline ::router::ResponseHeader* InferEnqueueReturn::mutable_header() {
  ::router::ResponseHeader* _msg = _internal_mutable_header();
  // @@protoc_insertion_point(field_mutable:router.InferEnqueueReturn.header)
  return _msg;
}
inline void InferEnqueueReturn::set_allocated_header(::router::ResponseHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete header_;
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::router::ResponseHeader>::GetOwningArena(header);
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:router.InferEnqueueReturn.header)
}

// repeated .router.Arg args = 2;
inline int InferEnqueueReturn::_internal_args_size() const {
  return args_.size();
}
inline int InferEnqueueReturn::args_size() const {
  return _internal_args_size();
}
inline void InferEnqueueReturn::clear_args() {
  args_.Clear();
}
inline ::router::Arg* InferEnqueueReturn::mutable_args(int index) {
  // @@protoc_insertion_point(field_mutable:router.InferEnqueueReturn.args)
  return args_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::router::Arg >*
InferEnqueueReturn::mutable_args() {
  // @@protoc_insertion_point(field_mutable_list:router.InferEnqueueReturn.args)
  return &args_;
}
inline const ::router::Arg& InferEnqueueReturn::_internal_args(int index) const {
  return args_.Get(index);
}
inline const ::router::Arg& InferEnqueueReturn::args(int index) const {
  // @@protoc_insertion_point(field_get:router.InferEnqueueReturn.args)
  return _internal_args(index);
}
inline ::router::Arg* InferEnqueueReturn::_internal_add_args() {
  return args_.Add();
}
inline ::router::Arg* InferEnqueueReturn::add_args() {
  ::router::Arg* _add = _internal_add_args();
  // @@protoc_insertion_point(field_add:router.InferEnqueueReturn.args)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::router::Arg >&
InferEnqueueReturn::args() const {
  // @@protoc_insertion_point(field_list:router.InferEnqueueReturn.args)
  return args_;
}

// -------------------------------------------------------------------

// SubnetDimension

// optional bytes depth = 1;
inline bool SubnetDimension::_internal_has_depth() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SubnetDimension::has_depth() const {
  return _internal_has_depth();
}
inline void SubnetDimension::clear_depth() {
  depth_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SubnetDimension::depth() const {
  // @@protoc_insertion_point(field_get:router.SubnetDimension.depth)
  return _internal_depth();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SubnetDimension::set_depth(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 depth_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:router.SubnetDimension.depth)
}
inline std::string* SubnetDimension::mutable_depth() {
  std::string* _s = _internal_mutable_depth();
  // @@protoc_insertion_point(field_mutable:router.SubnetDimension.depth)
  return _s;
}
inline const std::string& SubnetDimension::_internal_depth() const {
  return depth_.Get();
}
inline void SubnetDimension::_internal_set_depth(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  depth_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SubnetDimension::_internal_mutable_depth() {
  _has_bits_[0] |= 0x00000001u;
  return depth_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SubnetDimension::release_depth() {
  // @@protoc_insertion_point(field_release:router.SubnetDimension.depth)
  if (!_internal_has_depth()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = depth_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (depth_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    depth_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void SubnetDimension::set_allocated_depth(std::string* depth) {
  if (depth != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  depth_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), depth,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (depth_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    depth_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:router.SubnetDimension.depth)
}

// optional bytes elastic_ratio = 2;
inline bool SubnetDimension::_internal_has_elastic_ratio() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool SubnetDimension::has_elastic_ratio() const {
  return _internal_has_elastic_ratio();
}
inline void SubnetDimension::clear_elastic_ratio() {
  elastic_ratio_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& SubnetDimension::elastic_ratio() const {
  // @@protoc_insertion_point(field_get:router.SubnetDimension.elastic_ratio)
  return _internal_elastic_ratio();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SubnetDimension::set_elastic_ratio(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 elastic_ratio_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:router.SubnetDimension.elastic_ratio)
}
inline std::string* SubnetDimension::mutable_elastic_ratio() {
  std::string* _s = _internal_mutable_elastic_ratio();
  // @@protoc_insertion_point(field_mutable:router.SubnetDimension.elastic_ratio)
  return _s;
}
inline const std::string& SubnetDimension::_internal_elastic_ratio() const {
  return elastic_ratio_.Get();
}
inline void SubnetDimension::_internal_set_elastic_ratio(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  elastic_ratio_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SubnetDimension::_internal_mutable_elastic_ratio() {
  _has_bits_[0] |= 0x00000002u;
  return elastic_ratio_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SubnetDimension::release_elastic_ratio() {
  // @@protoc_insertion_point(field_release:router.SubnetDimension.elastic_ratio)
  if (!_internal_has_elastic_ratio()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = elastic_ratio_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (elastic_ratio_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    elastic_ratio_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void SubnetDimension::set_allocated_elastic_ratio(std::string* elastic_ratio) {
  if (elastic_ratio != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  elastic_ratio_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), elastic_ratio,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (elastic_ratio_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    elastic_ratio_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:router.SubnetDimension.elastic_ratio)
}

// optional bytes width_multiplier = 3;
inline bool SubnetDimension::_internal_has_width_multiplier() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool SubnetDimension::has_width_multiplier() const {
  return _internal_has_width_multiplier();
}
inline void SubnetDimension::clear_width_multiplier() {
  width_multiplier_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& SubnetDimension::width_multiplier() const {
  // @@protoc_insertion_point(field_get:router.SubnetDimension.width_multiplier)
  return _internal_width_multiplier();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SubnetDimension::set_width_multiplier(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000004u;
 width_multiplier_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:router.SubnetDimension.width_multiplier)
}
inline std::string* SubnetDimension::mutable_width_multiplier() {
  std::string* _s = _internal_mutable_width_multiplier();
  // @@protoc_insertion_point(field_mutable:router.SubnetDimension.width_multiplier)
  return _s;
}
inline const std::string& SubnetDimension::_internal_width_multiplier() const {
  return width_multiplier_.Get();
}
inline void SubnetDimension::_internal_set_width_multiplier(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  width_multiplier_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SubnetDimension::_internal_mutable_width_multiplier() {
  _has_bits_[0] |= 0x00000004u;
  return width_multiplier_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SubnetDimension::release_width_multiplier() {
  // @@protoc_insertion_point(field_release:router.SubnetDimension.width_multiplier)
  if (!_internal_has_width_multiplier()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  auto* p = width_multiplier_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (width_multiplier_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    width_multiplier_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void SubnetDimension::set_allocated_width_multiplier(std::string* width_multiplier) {
  if (width_multiplier != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  width_multiplier_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), width_multiplier,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (width_multiplier_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    width_multiplier_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:router.SubnetDimension.width_multiplier)
}

// -------------------------------------------------------------------

// InferWorkerArg

// repeated .router.InferEnqueueArg worker_args = 1;
inline int InferWorkerArg::_internal_worker_args_size() const {
  return worker_args_.size();
}
inline int InferWorkerArg::worker_args_size() const {
  return _internal_worker_args_size();
}
inline void InferWorkerArg::clear_worker_args() {
  worker_args_.Clear();
}
inline ::router::InferEnqueueArg* InferWorkerArg::mutable_worker_args(int index) {
  // @@protoc_insertion_point(field_mutable:router.InferWorkerArg.worker_args)
  return worker_args_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::router::InferEnqueueArg >*
InferWorkerArg::mutable_worker_args() {
  // @@protoc_insertion_point(field_mutable_list:router.InferWorkerArg.worker_args)
  return &worker_args_;
}
inline const ::router::InferEnqueueArg& InferWorkerArg::_internal_worker_args(int index) const {
  return worker_args_.Get(index);
}
inline const ::router::InferEnqueueArg& InferWorkerArg::worker_args(int index) const {
  // @@protoc_insertion_point(field_get:router.InferWorkerArg.worker_args)
  return _internal_worker_args(index);
}
inline ::router::InferEnqueueArg* InferWorkerArg::_internal_add_worker_args() {
  return worker_args_.Add();
}
inline ::router::InferEnqueueArg* InferWorkerArg::add_worker_args() {
  ::router::InferEnqueueArg* _add = _internal_add_worker_args();
  // @@protoc_insertion_point(field_add:router.InferWorkerArg.worker_args)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::router::InferEnqueueArg >&
InferWorkerArg::worker_args() const {
  // @@protoc_insertion_point(field_list:router.InferWorkerArg.worker_args)
  return worker_args_;
}

// optional .router.SubnetDimension subnet_dimension = 2;
inline bool InferWorkerArg::_internal_has_subnet_dimension() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || subnet_dimension_ != nullptr);
  return value;
}
inline bool InferWorkerArg::has_subnet_dimension() const {
  return _internal_has_subnet_dimension();
}
inline void InferWorkerArg::clear_subnet_dimension() {
  if (subnet_dimension_ != nullptr) subnet_dimension_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::router::SubnetDimension& InferWorkerArg::_internal_subnet_dimension() const {
  const ::router::SubnetDimension* p = subnet_dimension_;
  return p != nullptr ? *p : reinterpret_cast<const ::router::SubnetDimension&>(
      ::router::_SubnetDimension_default_instance_);
}
inline const ::router::SubnetDimension& InferWorkerArg::subnet_dimension() const {
  // @@protoc_insertion_point(field_get:router.InferWorkerArg.subnet_dimension)
  return _internal_subnet_dimension();
}
inline void InferWorkerArg::unsafe_arena_set_allocated_subnet_dimension(
    ::router::SubnetDimension* subnet_dimension) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(subnet_dimension_);
  }
  subnet_dimension_ = subnet_dimension;
  if (subnet_dimension) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:router.InferWorkerArg.subnet_dimension)
}
inline ::router::SubnetDimension* InferWorkerArg::release_subnet_dimension() {
  _has_bits_[0] &= ~0x00000001u;
  ::router::SubnetDimension* temp = subnet_dimension_;
  subnet_dimension_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::router::SubnetDimension* InferWorkerArg::unsafe_arena_release_subnet_dimension() {
  // @@protoc_insertion_point(field_release:router.InferWorkerArg.subnet_dimension)
  _has_bits_[0] &= ~0x00000001u;
  ::router::SubnetDimension* temp = subnet_dimension_;
  subnet_dimension_ = nullptr;
  return temp;
}
inline ::router::SubnetDimension* InferWorkerArg::_internal_mutable_subnet_dimension() {
  _has_bits_[0] |= 0x00000001u;
  if (subnet_dimension_ == nullptr) {
    auto* p = CreateMaybeMessage<::router::SubnetDimension>(GetArenaForAllocation());
    subnet_dimension_ = p;
  }
  return subnet_dimension_;
}
inline ::router::SubnetDimension* InferWorkerArg::mutable_subnet_dimension() {
  ::router::SubnetDimension* _msg = _internal_mutable_subnet_dimension();
  // @@protoc_insertion_point(field_mutable:router.InferWorkerArg.subnet_dimension)
  return _msg;
}
inline void InferWorkerArg::set_allocated_subnet_dimension(::router::SubnetDimension* subnet_dimension) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete subnet_dimension_;
  }
  if (subnet_dimension) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::router::SubnetDimension>::GetOwningArena(subnet_dimension);
    if (message_arena != submessage_arena) {
      subnet_dimension = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, subnet_dimension, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  subnet_dimension_ = subnet_dimension;
  // @@protoc_insertion_point(field_set_allocated:router.InferWorkerArg.subnet_dimension)
}

// -------------------------------------------------------------------

// InferWorkerReturn

// repeated .router.InferEnqueueReturn worker_args = 1;
inline int InferWorkerReturn::_internal_worker_args_size() const {
  return worker_args_.size();
}
inline int InferWorkerReturn::worker_args_size() const {
  return _internal_worker_args_size();
}
inline void InferWorkerReturn::clear_worker_args() {
  worker_args_.Clear();
}
inline ::router::InferEnqueueReturn* InferWorkerReturn::mutable_worker_args(int index) {
  // @@protoc_insertion_point(field_mutable:router.InferWorkerReturn.worker_args)
  return worker_args_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::router::InferEnqueueReturn >*
InferWorkerReturn::mutable_worker_args() {
  // @@protoc_insertion_point(field_mutable_list:router.InferWorkerReturn.worker_args)
  return &worker_args_;
}
inline const ::router::InferEnqueueReturn& InferWorkerReturn::_internal_worker_args(int index) const {
  return worker_args_.Get(index);
}
inline const ::router::InferEnqueueReturn& InferWorkerReturn::worker_args(int index) const {
  // @@protoc_insertion_point(field_get:router.InferWorkerReturn.worker_args)
  return _internal_worker_args(index);
}
inline ::router::InferEnqueueReturn* InferWorkerReturn::_internal_add_worker_args() {
  return worker_args_.Add();
}
inline ::router::InferEnqueueReturn* InferWorkerReturn::add_worker_args() {
  ::router::InferEnqueueReturn* _add = _internal_add_worker_args();
  // @@protoc_insertion_point(field_add:router.InferWorkerReturn.worker_args)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::router::InferEnqueueReturn >&
InferWorkerReturn::worker_args() const {
  // @@protoc_insertion_point(field_list:router.InferWorkerReturn.worker_args)
  return worker_args_;
}

// -------------------------------------------------------------------

// LoadModelWorkerArg

// required string model_path = 1;
inline bool LoadModelWorkerArg::_internal_has_model_path() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool LoadModelWorkerArg::has_model_path() const {
  return _internal_has_model_path();
}
inline void LoadModelWorkerArg::clear_model_path() {
  model_path_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& LoadModelWorkerArg::model_path() const {
  // @@protoc_insertion_point(field_get:router.LoadModelWorkerArg.model_path)
  return _internal_model_path();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LoadModelWorkerArg::set_model_path(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 model_path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:router.LoadModelWorkerArg.model_path)
}
inline std::string* LoadModelWorkerArg::mutable_model_path() {
  std::string* _s = _internal_mutable_model_path();
  // @@protoc_insertion_point(field_mutable:router.LoadModelWorkerArg.model_path)
  return _s;
}
inline const std::string& LoadModelWorkerArg::_internal_model_path() const {
  return model_path_.Get();
}
inline void LoadModelWorkerArg::_internal_set_model_path(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  model_path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* LoadModelWorkerArg::_internal_mutable_model_path() {
  _has_bits_[0] |= 0x00000001u;
  return model_path_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* LoadModelWorkerArg::release_model_path() {
  // @@protoc_insertion_point(field_release:router.LoadModelWorkerArg.model_path)
  if (!_internal_has_model_path()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = model_path_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (model_path_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    model_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void LoadModelWorkerArg::set_allocated_model_path(std::string* model_path) {
  if (model_path != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  model_path_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), model_path,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (model_path_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    model_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:router.LoadModelWorkerArg.model_path)
}

// -------------------------------------------------------------------

// LoadModelWorkerReturn

// required int32 status = 1;
inline bool LoadModelWorkerReturn::_internal_has_status() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool LoadModelWorkerReturn::has_status() const {
  return _internal_has_status();
}
inline void LoadModelWorkerReturn::clear_status() {
  status_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline int32_t LoadModelWorkerReturn::_internal_status() const {
  return status_;
}
inline int32_t LoadModelWorkerReturn::status() const {
  // @@protoc_insertion_point(field_get:router.LoadModelWorkerReturn.status)
  return _internal_status();
}
inline void LoadModelWorkerReturn::_internal_set_status(int32_t value) {
  _has_bits_[0] |= 0x00000001u;
  status_ = value;
}
inline void LoadModelWorkerReturn::set_status(int32_t value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:router.LoadModelWorkerReturn.status)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace router

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::router::TorchTensorType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::router::TorchTensorType>() {
  return ::router::TorchTensorType_descriptor();
}
template <> struct is_proto_enum< ::router::ArgType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::router::ArgType>() {
  return ::router::ArgType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_router_2eproto
