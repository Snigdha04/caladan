// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: router.proto

#include "router.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace router {
constexpr RequestHeader::RequestHeader(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : user_id_(0)
  , user_request_id_(0){}
struct RequestHeaderDefaultTypeInternal {
  constexpr RequestHeaderDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RequestHeaderDefaultTypeInternal() {}
  union {
    RequestHeader _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RequestHeaderDefaultTypeInternal _RequestHeader_default_instance_;
constexpr ResponseHeader::ResponseHeader(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : user_request_id_(0)
  , status_(0){}
struct ResponseHeaderDefaultTypeInternal {
  constexpr ResponseHeaderDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ResponseHeaderDefaultTypeInternal() {}
  union {
    ResponseHeader _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ResponseHeaderDefaultTypeInternal _ResponseHeader_default_instance_;
constexpr SetRouterSpecArg::SetRouterSpecArg(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : header_(nullptr)
  , max_batch_size_(0){}
struct SetRouterSpecArgDefaultTypeInternal {
  constexpr SetRouterSpecArgDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SetRouterSpecArgDefaultTypeInternal() {}
  union {
    SetRouterSpecArg _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SetRouterSpecArgDefaultTypeInternal _SetRouterSpecArg_default_instance_;
constexpr SetRouterSpecReturn::SetRouterSpecReturn(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : header_(nullptr){}
struct SetRouterSpecReturnDefaultTypeInternal {
  constexpr SetRouterSpecReturnDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SetRouterSpecReturnDefaultTypeInternal() {}
  union {
    SetRouterSpecReturn _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SetRouterSpecReturnDefaultTypeInternal _SetRouterSpecReturn_default_instance_;
constexpr TorchTensorArg::TorchTensorArg(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : byte_data_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct TorchTensorArgDefaultTypeInternal {
  constexpr TorchTensorArgDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TorchTensorArgDefaultTypeInternal() {}
  union {
    TorchTensorArg _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TorchTensorArgDefaultTypeInternal _TorchTensorArg_default_instance_;
constexpr Arg::Arg(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : string_arg_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , torch_tensor_arg_(nullptr)
  , double_arg_(0)
  , float_arg_(0)
  , int32_arg_(0)
  , int64_arg_(int64_t{0})
  , uint64_arg_(uint64_t{0u})
  , sint64_arg_(int64_t{0})
  , sint32_arg_(0)
  , fixed32_arg_(0u)
  , fixed64_arg_(uint64_t{0u})
  , sfixed64_arg_(int64_t{0})
  , sfixed32_arg_(0)
  , bool_arg_(false)
  , arg_type_(1)
{}
struct ArgDefaultTypeInternal {
  constexpr ArgDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ArgDefaultTypeInternal() {}
  union {
    Arg _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ArgDefaultTypeInternal _Arg_default_instance_;
constexpr InferEnqueueArg::InferEnqueueArg(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : args_()
  , header_(nullptr)
  , slo_ms_(0){}
struct InferEnqueueArgDefaultTypeInternal {
  constexpr InferEnqueueArgDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~InferEnqueueArgDefaultTypeInternal() {}
  union {
    InferEnqueueArg _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT InferEnqueueArgDefaultTypeInternal _InferEnqueueArg_default_instance_;
constexpr InferEnqueueReturn::InferEnqueueReturn(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : args_()
  , header_(nullptr){}
struct InferEnqueueReturnDefaultTypeInternal {
  constexpr InferEnqueueReturnDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~InferEnqueueReturnDefaultTypeInternal() {}
  union {
    InferEnqueueReturn _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT InferEnqueueReturnDefaultTypeInternal _InferEnqueueReturn_default_instance_;
constexpr SubnetDimension::SubnetDimension(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : depth_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , elastic_ratio_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , width_multiplier_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct SubnetDimensionDefaultTypeInternal {
  constexpr SubnetDimensionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SubnetDimensionDefaultTypeInternal() {}
  union {
    SubnetDimension _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SubnetDimensionDefaultTypeInternal _SubnetDimension_default_instance_;
constexpr InferWorkerArg::InferWorkerArg(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : worker_args_()
  , subnet_dimension_(nullptr){}
struct InferWorkerArgDefaultTypeInternal {
  constexpr InferWorkerArgDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~InferWorkerArgDefaultTypeInternal() {}
  union {
    InferWorkerArg _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT InferWorkerArgDefaultTypeInternal _InferWorkerArg_default_instance_;
constexpr InferWorkerReturn::InferWorkerReturn(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : worker_args_(){}
struct InferWorkerReturnDefaultTypeInternal {
  constexpr InferWorkerReturnDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~InferWorkerReturnDefaultTypeInternal() {}
  union {
    InferWorkerReturn _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT InferWorkerReturnDefaultTypeInternal _InferWorkerReturn_default_instance_;
constexpr LoadModelWorkerArg::LoadModelWorkerArg(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : model_path_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct LoadModelWorkerArgDefaultTypeInternal {
  constexpr LoadModelWorkerArgDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~LoadModelWorkerArgDefaultTypeInternal() {}
  union {
    LoadModelWorkerArg _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT LoadModelWorkerArgDefaultTypeInternal _LoadModelWorkerArg_default_instance_;
constexpr LoadModelWorkerReturn::LoadModelWorkerReturn(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : status_(0){}
struct LoadModelWorkerReturnDefaultTypeInternal {
  constexpr LoadModelWorkerReturnDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~LoadModelWorkerReturnDefaultTypeInternal() {}
  union {
    LoadModelWorkerReturn _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT LoadModelWorkerReturnDefaultTypeInternal _LoadModelWorkerReturn_default_instance_;
}  // namespace router
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_router_2eproto[13];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_router_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_router_2eproto = nullptr;

const uint32_t TableStruct_router_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::router::RequestHeader, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::router::RequestHeader, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::router::RequestHeader, user_id_),
  PROTOBUF_FIELD_OFFSET(::router::RequestHeader, user_request_id_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::router::ResponseHeader, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::router::ResponseHeader, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::router::ResponseHeader, user_request_id_),
  PROTOBUF_FIELD_OFFSET(::router::ResponseHeader, status_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::router::SetRouterSpecArg, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::router::SetRouterSpecArg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::router::SetRouterSpecArg, header_),
  PROTOBUF_FIELD_OFFSET(::router::SetRouterSpecArg, max_batch_size_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::router::SetRouterSpecReturn, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::router::SetRouterSpecReturn, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::router::SetRouterSpecReturn, header_),
  0,
  PROTOBUF_FIELD_OFFSET(::router::TorchTensorArg, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::router::TorchTensorArg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::router::TorchTensorArg, byte_data_),
  0,
  PROTOBUF_FIELD_OFFSET(::router::Arg, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::router::Arg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::router::Arg, double_arg_),
  PROTOBUF_FIELD_OFFSET(::router::Arg, float_arg_),
  PROTOBUF_FIELD_OFFSET(::router::Arg, int32_arg_),
  PROTOBUF_FIELD_OFFSET(::router::Arg, int64_arg_),
  PROTOBUF_FIELD_OFFSET(::router::Arg, uint64_arg_),
  PROTOBUF_FIELD_OFFSET(::router::Arg, sint32_arg_),
  PROTOBUF_FIELD_OFFSET(::router::Arg, sint64_arg_),
  PROTOBUF_FIELD_OFFSET(::router::Arg, fixed32_arg_),
  PROTOBUF_FIELD_OFFSET(::router::Arg, fixed64_arg_),
  PROTOBUF_FIELD_OFFSET(::router::Arg, sfixed32_arg_),
  PROTOBUF_FIELD_OFFSET(::router::Arg, sfixed64_arg_),
  PROTOBUF_FIELD_OFFSET(::router::Arg, bool_arg_),
  PROTOBUF_FIELD_OFFSET(::router::Arg, string_arg_),
  PROTOBUF_FIELD_OFFSET(::router::Arg, torch_tensor_arg_),
  PROTOBUF_FIELD_OFFSET(::router::Arg, arg_type_),
  2,
  3,
  4,
  5,
  6,
  8,
  7,
  9,
  10,
  12,
  11,
  13,
  0,
  1,
  14,
  PROTOBUF_FIELD_OFFSET(::router::InferEnqueueArg, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::router::InferEnqueueArg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::router::InferEnqueueArg, header_),
  PROTOBUF_FIELD_OFFSET(::router::InferEnqueueArg, args_),
  PROTOBUF_FIELD_OFFSET(::router::InferEnqueueArg, slo_ms_),
  0,
  ~0u,
  1,
  PROTOBUF_FIELD_OFFSET(::router::InferEnqueueReturn, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::router::InferEnqueueReturn, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::router::InferEnqueueReturn, header_),
  PROTOBUF_FIELD_OFFSET(::router::InferEnqueueReturn, args_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::router::SubnetDimension, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::router::SubnetDimension, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::router::SubnetDimension, depth_),
  PROTOBUF_FIELD_OFFSET(::router::SubnetDimension, elastic_ratio_),
  PROTOBUF_FIELD_OFFSET(::router::SubnetDimension, width_multiplier_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::router::InferWorkerArg, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::router::InferWorkerArg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::router::InferWorkerArg, worker_args_),
  PROTOBUF_FIELD_OFFSET(::router::InferWorkerArg, subnet_dimension_),
  ~0u,
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::router::InferWorkerReturn, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::router::InferWorkerReturn, worker_args_),
  PROTOBUF_FIELD_OFFSET(::router::LoadModelWorkerArg, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::router::LoadModelWorkerArg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::router::LoadModelWorkerArg, model_path_),
  0,
  PROTOBUF_FIELD_OFFSET(::router::LoadModelWorkerReturn, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::router::LoadModelWorkerReturn, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::router::LoadModelWorkerReturn, status_),
  0,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, -1, sizeof(::router::RequestHeader)},
  { 10, 18, -1, sizeof(::router::ResponseHeader)},
  { 20, 28, -1, sizeof(::router::SetRouterSpecArg)},
  { 30, 37, -1, sizeof(::router::SetRouterSpecReturn)},
  { 38, 45, -1, sizeof(::router::TorchTensorArg)},
  { 46, 67, -1, sizeof(::router::Arg)},
  { 82, 91, -1, sizeof(::router::InferEnqueueArg)},
  { 94, 102, -1, sizeof(::router::InferEnqueueReturn)},
  { 104, 113, -1, sizeof(::router::SubnetDimension)},
  { 116, 124, -1, sizeof(::router::InferWorkerArg)},
  { 126, -1, -1, sizeof(::router::InferWorkerReturn)},
  { 133, 140, -1, sizeof(::router::LoadModelWorkerArg)},
  { 141, 148, -1, sizeof(::router::LoadModelWorkerReturn)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::router::_RequestHeader_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::router::_ResponseHeader_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::router::_SetRouterSpecArg_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::router::_SetRouterSpecReturn_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::router::_TorchTensorArg_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::router::_Arg_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::router::_InferEnqueueArg_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::router::_InferEnqueueReturn_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::router::_SubnetDimension_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::router::_InferWorkerArg_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::router::_InferWorkerReturn_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::router::_LoadModelWorkerArg_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::router::_LoadModelWorkerReturn_default_instance_),
};

const char descriptor_table_protodef_router_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\014router.proto\022\006router\"9\n\rRequestHeader\022"
  "\017\n\007user_id\030\001 \002(\005\022\027\n\017user_request_id\030\002 \001("
  "\005\"9\n\016ResponseHeader\022\027\n\017user_request_id\030\001"
  " \001(\005\022\016\n\006status\030\002 \001(\005\"Q\n\020SetRouterSpecArg"
  "\022%\n\006header\030\001 \002(\0132\025.router.RequestHeader\022"
  "\026\n\016max_batch_size\030\002 \001(\005\"=\n\023SetRouterSpec"
  "Return\022&\n\006header\030\001 \002(\0132\026.router.Response"
  "Header\"#\n\016TorchTensorArg\022\021\n\tbyte_data\030\001 "
  "\002(\014\"\337\002\n\003Arg\022\022\n\ndouble_arg\030\001 \001(\001\022\021\n\tfloat"
  "_arg\030\002 \001(\002\022\021\n\tint32_arg\030\003 \001(\005\022\021\n\tint64_a"
  "rg\030\004 \001(\003\022\022\n\nuint64_arg\030\005 \001(\004\022\022\n\nsint32_a"
  "rg\030\006 \001(\021\022\022\n\nsint64_arg\030\007 \001(\022\022\023\n\013fixed32_"
  "arg\030\010 \001(\007\022\023\n\013fixed64_arg\030\t \001(\006\022\024\n\014sfixed"
  "32_arg\030\n \001(\017\022\024\n\014sfixed64_arg\030\013 \001(\020\022\020\n\010bo"
  "ol_arg\030\014 \001(\010\022\022\n\nstring_arg\030\r \001(\t\0220\n\020torc"
  "h_tensor_arg\030\016 \001(\0132\026.router.TorchTensorA"
  "rg\022!\n\010arg_type\030\017 \002(\0162\017.router.ArgType\"c\n"
  "\017InferEnqueueArg\022%\n\006header\030\001 \002(\0132\025.route"
  "r.RequestHeader\022\031\n\004args\030\002 \003(\0132\013.router.A"
  "rg\022\016\n\006slo_ms\030\003 \002(\005\"W\n\022InferEnqueueReturn"
  "\022&\n\006header\030\001 \002(\0132\026.router.ResponseHeader"
  "\022\031\n\004args\030\002 \003(\0132\013.router.Arg\"Q\n\017SubnetDim"
  "ension\022\r\n\005depth\030\001 \001(\014\022\025\n\relastic_ratio\030\002"
  " \001(\014\022\030\n\020width_multiplier\030\003 \001(\014\"q\n\016InferW"
  "orkerArg\022,\n\013worker_args\030\001 \003(\0132\027.router.I"
  "nferEnqueueArg\0221\n\020subnet_dimension\030\002 \001(\013"
  "2\027.router.SubnetDimension\"D\n\021InferWorker"
  "Return\022/\n\013worker_args\030\001 \003(\0132\032.router.Inf"
  "erEnqueueReturn\"(\n\022LoadModelWorkerArg\022\022\n"
  "\nmodel_path\030\001 \002(\t\"\'\n\025LoadModelWorkerRetu"
  "rn\022\016\n\006status\030\001 \002(\005*\250\001\n\017TorchTensorType\022\n"
  "\n\006TFLOAT\020\000\022\013\n\007TDOUBLE\020\001\022\017\n\013TCOMPLEX128\020\003"
  "\022\013\n\007TCFLOAT\020\004\022\014\n\010TFLOAT16\020\005\022\r\n\tTBFLOAT16"
  "\020\006\022\n\n\006TUINT8\020\007\022\t\n\005TINT8\020\010\022\n\n\006TINT16\020\t\022\010\n"
  "\004TINT\020\n\022\t\n\005TLONG\020\013\022\t\n\005TBOOL\020\014*\267\001\n\007ArgTyp"
  "e\022\n\n\006DOUBLE\020\001\022\t\n\005FLOAT\020\002\022\t\n\005INT32\020\003\022\t\n\005I"
  "NT64\020\004\022\n\n\006UINT64\020\005\022\n\n\006SINT32\020\006\022\n\n\006SINT64"
  "\020\007\022\013\n\007FIXED32\020\010\022\013\n\007FIXED64\020\t\022\014\n\010SFIXED32"
  "\020\n\022\014\n\010SFIXED64\020\013\022\010\n\004BOOL\020\014\022\n\n\006STRING\020\r\022\017"
  "\n\013TORCHTENSOR\020\0162\234\001\n\rRouterService\022C\n\014Inf"
  "erEnqueue\022\027.router.InferEnqueueArg\032\032.rou"
  "ter.InferEnqueueReturn\022F\n\rSetRouterSpec\022"
  "\030.router.SetRouterSpecArg\032\033.router.SetRo"
  "uterSpecReturn2\237\001\n\rWorkerService\022@\n\013Infe"
  "rWorker\022\026.router.InferWorkerArg\032\031.router"
  ".InferWorkerReturn\022L\n\017LoadModelWorker\022\032."
  "router.LoadModelWorkerArg\032\035.router.LoadM"
  "odelWorkerReturn"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_router_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_router_2eproto = {
  false, false, 1896, descriptor_table_protodef_router_2eproto, "router.proto", 
  &descriptor_table_router_2eproto_once, nullptr, 0, 13,
  schemas, file_default_instances, TableStruct_router_2eproto::offsets,
  file_level_metadata_router_2eproto, file_level_enum_descriptors_router_2eproto, file_level_service_descriptors_router_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_router_2eproto_getter() {
  return &descriptor_table_router_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_router_2eproto(&descriptor_table_router_2eproto);
namespace router {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TorchTensorType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_router_2eproto);
  return file_level_enum_descriptors_router_2eproto[0];
}
bool TorchTensorType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ArgType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_router_2eproto);
  return file_level_enum_descriptors_router_2eproto[1];
}
bool ArgType_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class RequestHeader::_Internal {
 public:
  using HasBits = decltype(std::declval<RequestHeader>()._has_bits_);
  static void set_has_user_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_user_request_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

RequestHeader::RequestHeader(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:router.RequestHeader)
}
RequestHeader::RequestHeader(const RequestHeader& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&user_id_, &from.user_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&user_request_id_) -
    reinterpret_cast<char*>(&user_id_)) + sizeof(user_request_id_));
  // @@protoc_insertion_point(copy_constructor:router.RequestHeader)
}

inline void RequestHeader::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&user_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&user_request_id_) -
    reinterpret_cast<char*>(&user_id_)) + sizeof(user_request_id_));
}

RequestHeader::~RequestHeader() {
  // @@protoc_insertion_point(destructor:router.RequestHeader)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void RequestHeader::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void RequestHeader::ArenaDtor(void* object) {
  RequestHeader* _this = reinterpret_cast< RequestHeader* >(object);
  (void)_this;
}
void RequestHeader::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RequestHeader::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RequestHeader::Clear() {
// @@protoc_insertion_point(message_clear_start:router.RequestHeader)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&user_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&user_request_id_) -
        reinterpret_cast<char*>(&user_id_)) + sizeof(user_request_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RequestHeader::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required int32 user_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_user_id(&has_bits);
          user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 user_request_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_user_request_id(&has_bits);
          user_request_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RequestHeader::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:router.RequestHeader)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 user_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_user_id(), target);
  }

  // optional int32 user_request_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_user_request_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:router.RequestHeader)
  return target;
}

size_t RequestHeader::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:router.RequestHeader)
  size_t total_size = 0;

  // required int32 user_id = 1;
  if (_internal_has_user_id()) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_user_id());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int32 user_request_id = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_user_request_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RequestHeader::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RequestHeader::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RequestHeader::GetClassData() const { return &_class_data_; }

void RequestHeader::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RequestHeader *>(to)->MergeFrom(
      static_cast<const RequestHeader &>(from));
}


void RequestHeader::MergeFrom(const RequestHeader& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:router.RequestHeader)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      user_id_ = from.user_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      user_request_id_ = from.user_request_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RequestHeader::CopyFrom(const RequestHeader& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:router.RequestHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestHeader::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void RequestHeader::InternalSwap(RequestHeader* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RequestHeader, user_request_id_)
      + sizeof(RequestHeader::user_request_id_)
      - PROTOBUF_FIELD_OFFSET(RequestHeader, user_id_)>(
          reinterpret_cast<char*>(&user_id_),
          reinterpret_cast<char*>(&other->user_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RequestHeader::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_router_2eproto_getter, &descriptor_table_router_2eproto_once,
      file_level_metadata_router_2eproto[0]);
}

// ===================================================================

class ResponseHeader::_Internal {
 public:
  using HasBits = decltype(std::declval<ResponseHeader>()._has_bits_);
  static void set_has_user_request_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_status(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

ResponseHeader::ResponseHeader(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:router.ResponseHeader)
}
ResponseHeader::ResponseHeader(const ResponseHeader& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&user_request_id_, &from.user_request_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&user_request_id_)) + sizeof(status_));
  // @@protoc_insertion_point(copy_constructor:router.ResponseHeader)
}

inline void ResponseHeader::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&user_request_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&user_request_id_)) + sizeof(status_));
}

ResponseHeader::~ResponseHeader() {
  // @@protoc_insertion_point(destructor:router.ResponseHeader)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ResponseHeader::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ResponseHeader::ArenaDtor(void* object) {
  ResponseHeader* _this = reinterpret_cast< ResponseHeader* >(object);
  (void)_this;
}
void ResponseHeader::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ResponseHeader::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ResponseHeader::Clear() {
// @@protoc_insertion_point(message_clear_start:router.ResponseHeader)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&user_request_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&status_) -
        reinterpret_cast<char*>(&user_request_id_)) + sizeof(status_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ResponseHeader::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 user_request_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_user_request_id(&has_bits);
          user_request_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 status = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_status(&has_bits);
          status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ResponseHeader::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:router.ResponseHeader)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 user_request_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_user_request_id(), target);
  }

  // optional int32 status = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:router.ResponseHeader)
  return target;
}

size_t ResponseHeader::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:router.ResponseHeader)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int32 user_request_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_user_request_id());
    }

    // optional int32 status = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_status());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ResponseHeader::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ResponseHeader::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ResponseHeader::GetClassData() const { return &_class_data_; }

void ResponseHeader::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ResponseHeader *>(to)->MergeFrom(
      static_cast<const ResponseHeader &>(from));
}


void ResponseHeader::MergeFrom(const ResponseHeader& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:router.ResponseHeader)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      user_request_id_ = from.user_request_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      status_ = from.status_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ResponseHeader::CopyFrom(const ResponseHeader& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:router.ResponseHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseHeader::IsInitialized() const {
  return true;
}

void ResponseHeader::InternalSwap(ResponseHeader* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ResponseHeader, status_)
      + sizeof(ResponseHeader::status_)
      - PROTOBUF_FIELD_OFFSET(ResponseHeader, user_request_id_)>(
          reinterpret_cast<char*>(&user_request_id_),
          reinterpret_cast<char*>(&other->user_request_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ResponseHeader::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_router_2eproto_getter, &descriptor_table_router_2eproto_once,
      file_level_metadata_router_2eproto[1]);
}

// ===================================================================

class SetRouterSpecArg::_Internal {
 public:
  using HasBits = decltype(std::declval<SetRouterSpecArg>()._has_bits_);
  static const ::router::RequestHeader& header(const SetRouterSpecArg* msg);
  static void set_has_header(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_max_batch_size(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::router::RequestHeader&
SetRouterSpecArg::_Internal::header(const SetRouterSpecArg* msg) {
  return *msg->header_;
}
SetRouterSpecArg::SetRouterSpecArg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:router.SetRouterSpecArg)
}
SetRouterSpecArg::SetRouterSpecArg(const SetRouterSpecArg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::router::RequestHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  max_batch_size_ = from.max_batch_size_;
  // @@protoc_insertion_point(copy_constructor:router.SetRouterSpecArg)
}

inline void SetRouterSpecArg::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&header_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&max_batch_size_) -
    reinterpret_cast<char*>(&header_)) + sizeof(max_batch_size_));
}

SetRouterSpecArg::~SetRouterSpecArg() {
  // @@protoc_insertion_point(destructor:router.SetRouterSpecArg)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SetRouterSpecArg::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete header_;
}

void SetRouterSpecArg::ArenaDtor(void* object) {
  SetRouterSpecArg* _this = reinterpret_cast< SetRouterSpecArg* >(object);
  (void)_this;
}
void SetRouterSpecArg::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SetRouterSpecArg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SetRouterSpecArg::Clear() {
// @@protoc_insertion_point(message_clear_start:router.SetRouterSpecArg)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(header_ != nullptr);
    header_->Clear();
  }
  max_batch_size_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetRouterSpecArg::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .router.RequestHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 max_batch_size = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_max_batch_size(&has_bits);
          max_batch_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SetRouterSpecArg::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:router.SetRouterSpecArg)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .router.RequestHeader header = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // optional int32 max_batch_size = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_max_batch_size(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:router.SetRouterSpecArg)
  return target;
}

size_t SetRouterSpecArg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:router.SetRouterSpecArg)
  size_t total_size = 0;

  // required .router.RequestHeader header = 1;
  if (_internal_has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int32 max_batch_size = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_max_batch_size());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SetRouterSpecArg::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SetRouterSpecArg::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SetRouterSpecArg::GetClassData() const { return &_class_data_; }

void SetRouterSpecArg::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SetRouterSpecArg *>(to)->MergeFrom(
      static_cast<const SetRouterSpecArg &>(from));
}


void SetRouterSpecArg::MergeFrom(const SetRouterSpecArg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:router.SetRouterSpecArg)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_header()->::router::RequestHeader::MergeFrom(from._internal_header());
    }
    if (cached_has_bits & 0x00000002u) {
      max_batch_size_ = from.max_batch_size_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SetRouterSpecArg::CopyFrom(const SetRouterSpecArg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:router.SetRouterSpecArg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetRouterSpecArg::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_header()) {
    if (!header_->IsInitialized()) return false;
  }
  return true;
}

void SetRouterSpecArg::InternalSwap(SetRouterSpecArg* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SetRouterSpecArg, max_batch_size_)
      + sizeof(SetRouterSpecArg::max_batch_size_)
      - PROTOBUF_FIELD_OFFSET(SetRouterSpecArg, header_)>(
          reinterpret_cast<char*>(&header_),
          reinterpret_cast<char*>(&other->header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SetRouterSpecArg::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_router_2eproto_getter, &descriptor_table_router_2eproto_once,
      file_level_metadata_router_2eproto[2]);
}

// ===================================================================

class SetRouterSpecReturn::_Internal {
 public:
  using HasBits = decltype(std::declval<SetRouterSpecReturn>()._has_bits_);
  static const ::router::ResponseHeader& header(const SetRouterSpecReturn* msg);
  static void set_has_header(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::router::ResponseHeader&
SetRouterSpecReturn::_Internal::header(const SetRouterSpecReturn* msg) {
  return *msg->header_;
}
SetRouterSpecReturn::SetRouterSpecReturn(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:router.SetRouterSpecReturn)
}
SetRouterSpecReturn::SetRouterSpecReturn(const SetRouterSpecReturn& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::router::ResponseHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:router.SetRouterSpecReturn)
}

inline void SetRouterSpecReturn::SharedCtor() {
header_ = nullptr;
}

SetRouterSpecReturn::~SetRouterSpecReturn() {
  // @@protoc_insertion_point(destructor:router.SetRouterSpecReturn)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SetRouterSpecReturn::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete header_;
}

void SetRouterSpecReturn::ArenaDtor(void* object) {
  SetRouterSpecReturn* _this = reinterpret_cast< SetRouterSpecReturn* >(object);
  (void)_this;
}
void SetRouterSpecReturn::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SetRouterSpecReturn::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SetRouterSpecReturn::Clear() {
// @@protoc_insertion_point(message_clear_start:router.SetRouterSpecReturn)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(header_ != nullptr);
    header_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetRouterSpecReturn::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .router.ResponseHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SetRouterSpecReturn::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:router.SetRouterSpecReturn)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .router.ResponseHeader header = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:router.SetRouterSpecReturn)
  return target;
}

size_t SetRouterSpecReturn::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:router.SetRouterSpecReturn)
  size_t total_size = 0;

  // required .router.ResponseHeader header = 1;
  if (_internal_has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SetRouterSpecReturn::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SetRouterSpecReturn::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SetRouterSpecReturn::GetClassData() const { return &_class_data_; }

void SetRouterSpecReturn::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SetRouterSpecReturn *>(to)->MergeFrom(
      static_cast<const SetRouterSpecReturn &>(from));
}


void SetRouterSpecReturn::MergeFrom(const SetRouterSpecReturn& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:router.SetRouterSpecReturn)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_header()) {
    _internal_mutable_header()->::router::ResponseHeader::MergeFrom(from._internal_header());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SetRouterSpecReturn::CopyFrom(const SetRouterSpecReturn& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:router.SetRouterSpecReturn)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetRouterSpecReturn::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void SetRouterSpecReturn::InternalSwap(SetRouterSpecReturn* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(header_, other->header_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SetRouterSpecReturn::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_router_2eproto_getter, &descriptor_table_router_2eproto_once,
      file_level_metadata_router_2eproto[3]);
}

// ===================================================================

class TorchTensorArg::_Internal {
 public:
  using HasBits = decltype(std::declval<TorchTensorArg>()._has_bits_);
  static void set_has_byte_data(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

TorchTensorArg::TorchTensorArg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:router.TorchTensorArg)
}
TorchTensorArg::TorchTensorArg(const TorchTensorArg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  byte_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    byte_data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_byte_data()) {
    byte_data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_byte_data(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:router.TorchTensorArg)
}

inline void TorchTensorArg::SharedCtor() {
byte_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  byte_data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TorchTensorArg::~TorchTensorArg() {
  // @@protoc_insertion_point(destructor:router.TorchTensorArg)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TorchTensorArg::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  byte_data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TorchTensorArg::ArenaDtor(void* object) {
  TorchTensorArg* _this = reinterpret_cast< TorchTensorArg* >(object);
  (void)_this;
}
void TorchTensorArg::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TorchTensorArg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TorchTensorArg::Clear() {
// @@protoc_insertion_point(message_clear_start:router.TorchTensorArg)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    byte_data_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TorchTensorArg::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required bytes byte_data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_byte_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TorchTensorArg::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:router.TorchTensorArg)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bytes byte_data = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_byte_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:router.TorchTensorArg)
  return target;
}

size_t TorchTensorArg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:router.TorchTensorArg)
  size_t total_size = 0;

  // required bytes byte_data = 1;
  if (_internal_has_byte_data()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_byte_data());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TorchTensorArg::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TorchTensorArg::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TorchTensorArg::GetClassData() const { return &_class_data_; }

void TorchTensorArg::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TorchTensorArg *>(to)->MergeFrom(
      static_cast<const TorchTensorArg &>(from));
}


void TorchTensorArg::MergeFrom(const TorchTensorArg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:router.TorchTensorArg)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_byte_data()) {
    _internal_set_byte_data(from._internal_byte_data());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TorchTensorArg::CopyFrom(const TorchTensorArg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:router.TorchTensorArg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TorchTensorArg::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void TorchTensorArg::InternalSwap(TorchTensorArg* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &byte_data_, lhs_arena,
      &other->byte_data_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata TorchTensorArg::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_router_2eproto_getter, &descriptor_table_router_2eproto_once,
      file_level_metadata_router_2eproto[4]);
}

// ===================================================================

class Arg::_Internal {
 public:
  using HasBits = decltype(std::declval<Arg>()._has_bits_);
  static void set_has_double_arg(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_float_arg(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_int32_arg(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_int64_arg(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_uint64_arg(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_sint32_arg(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_sint64_arg(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_fixed32_arg(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_fixed64_arg(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_sfixed32_arg(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_sfixed64_arg(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_bool_arg(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_string_arg(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::router::TorchTensorArg& torch_tensor_arg(const Arg* msg);
  static void set_has_torch_tensor_arg(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_arg_type(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00004000) ^ 0x00004000) != 0;
  }
};

const ::router::TorchTensorArg&
Arg::_Internal::torch_tensor_arg(const Arg* msg) {
  return *msg->torch_tensor_arg_;
}
Arg::Arg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:router.Arg)
}
Arg::Arg(const Arg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  string_arg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    string_arg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_string_arg()) {
    string_arg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_string_arg(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_torch_tensor_arg()) {
    torch_tensor_arg_ = new ::router::TorchTensorArg(*from.torch_tensor_arg_);
  } else {
    torch_tensor_arg_ = nullptr;
  }
  ::memcpy(&double_arg_, &from.double_arg_,
    static_cast<size_t>(reinterpret_cast<char*>(&arg_type_) -
    reinterpret_cast<char*>(&double_arg_)) + sizeof(arg_type_));
  // @@protoc_insertion_point(copy_constructor:router.Arg)
}

inline void Arg::SharedCtor() {
string_arg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  string_arg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&torch_tensor_arg_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&bool_arg_) -
    reinterpret_cast<char*>(&torch_tensor_arg_)) + sizeof(bool_arg_));
arg_type_ = 1;
}

Arg::~Arg() {
  // @@protoc_insertion_point(destructor:router.Arg)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Arg::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  string_arg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete torch_tensor_arg_;
}

void Arg::ArenaDtor(void* object) {
  Arg* _this = reinterpret_cast< Arg* >(object);
  (void)_this;
}
void Arg::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Arg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Arg::Clear() {
// @@protoc_insertion_point(message_clear_start:router.Arg)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      string_arg_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(torch_tensor_arg_ != nullptr);
      torch_tensor_arg_->Clear();
    }
  }
  if (cached_has_bits & 0x000000fcu) {
    ::memset(&double_arg_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&sint64_arg_) -
        reinterpret_cast<char*>(&double_arg_)) + sizeof(sint64_arg_));
  }
  if (cached_has_bits & 0x00007f00u) {
    ::memset(&sint32_arg_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&bool_arg_) -
        reinterpret_cast<char*>(&sint32_arg_)) + sizeof(bool_arg_));
    arg_type_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Arg::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional double double_arg = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_double_arg(&has_bits);
          double_arg_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional float float_arg = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _Internal::set_has_float_arg(&has_bits);
          float_arg_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional int32 int32_arg = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_int32_arg(&has_bits);
          int32_arg_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 int64_arg = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_int64_arg(&has_bits);
          int64_arg_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 uint64_arg = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_uint64_arg(&has_bits);
          uint64_arg_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional sint32 sint32_arg = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_sint32_arg(&has_bits);
          sint32_arg_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional sint64 sint64_arg = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_sint64_arg(&has_bits);
          sint64_arg_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional fixed32 fixed32_arg = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 69)) {
          _Internal::set_has_fixed32_arg(&has_bits);
          fixed32_arg_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint32_t>(ptr);
          ptr += sizeof(uint32_t);
        } else
          goto handle_unusual;
        continue;
      // optional fixed64 fixed64_arg = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 73)) {
          _Internal::set_has_fixed64_arg(&has_bits);
          fixed64_arg_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional sfixed32 sfixed32_arg = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 85)) {
          _Internal::set_has_sfixed32_arg(&has_bits);
          sfixed32_arg_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<int32_t>(ptr);
          ptr += sizeof(int32_t);
        } else
          goto handle_unusual;
        continue;
      // optional sfixed64 sfixed64_arg = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 89)) {
          _Internal::set_has_sfixed64_arg(&has_bits);
          sfixed64_arg_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<int64_t>(ptr);
          ptr += sizeof(int64_t);
        } else
          goto handle_unusual;
        continue;
      // optional bool bool_arg = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _Internal::set_has_bool_arg(&has_bits);
          bool_arg_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string string_arg = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          auto str = _internal_mutable_string_arg();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "router.Arg.string_arg");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .router.TorchTensorArg torch_tensor_arg = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_torch_tensor_arg(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .router.ArgType arg_type = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::router::ArgType_IsValid(val))) {
            _internal_set_arg_type(static_cast<::router::ArgType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(15, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Arg::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:router.Arg)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double double_arg = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_double_arg(), target);
  }

  // optional float float_arg = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_float_arg(), target);
  }

  // optional int32 int32_arg = 3;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_int32_arg(), target);
  }

  // optional int64 int64_arg = 4;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_int64_arg(), target);
  }

  // optional uint64 uint64_arg = 5;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal_uint64_arg(), target);
  }

  // optional sint32 sint32_arg = 6;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(6, this->_internal_sint32_arg(), target);
  }

  // optional sint64 sint64_arg = 7;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt64ToArray(7, this->_internal_sint64_arg(), target);
  }

  // optional fixed32 fixed32_arg = 8;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32ToArray(8, this->_internal_fixed32_arg(), target);
  }

  // optional fixed64 fixed64_arg = 9;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(9, this->_internal_fixed64_arg(), target);
  }

  // optional sfixed32 sfixed32_arg = 10;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSFixed32ToArray(10, this->_internal_sfixed32_arg(), target);
  }

  // optional sfixed64 sfixed64_arg = 11;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSFixed64ToArray(11, this->_internal_sfixed64_arg(), target);
  }

  // optional bool bool_arg = 12;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(12, this->_internal_bool_arg(), target);
  }

  // optional string string_arg = 13;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_string_arg().data(), static_cast<int>(this->_internal_string_arg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "router.Arg.string_arg");
    target = stream->WriteStringMaybeAliased(
        13, this->_internal_string_arg(), target);
  }

  // optional .router.TorchTensorArg torch_tensor_arg = 14;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        14, _Internal::torch_tensor_arg(this), target, stream);
  }

  // required .router.ArgType arg_type = 15;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      15, this->_internal_arg_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:router.Arg)
  return target;
}

size_t Arg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:router.Arg)
  size_t total_size = 0;

  // required .router.ArgType arg_type = 15;
  if (_internal_has_arg_type()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_arg_type());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string string_arg = 13;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_string_arg());
    }

    // optional .router.TorchTensorArg torch_tensor_arg = 14;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *torch_tensor_arg_);
    }

    // optional double double_arg = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional float float_arg = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

    // optional int32 int32_arg = 3;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_int32_arg());
    }

    // optional int64 int64_arg = 4;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_int64_arg());
    }

    // optional uint64 uint64_arg = 5;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_uint64_arg());
    }

    // optional sint64 sint64_arg = 7;
    if (cached_has_bits & 0x00000080u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt64SizePlusOne(this->_internal_sint64_arg());
    }

  }
  if (cached_has_bits & 0x00003f00u) {
    // optional sint32 sint32_arg = 6;
    if (cached_has_bits & 0x00000100u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32SizePlusOne(this->_internal_sint32_arg());
    }

    // optional fixed32 fixed32_arg = 8;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 4;
    }

    // optional fixed64 fixed64_arg = 9;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 8;
    }

    // optional sfixed64 sfixed64_arg = 11;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 8;
    }

    // optional sfixed32 sfixed32_arg = 10;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 + 4;
    }

    // optional bool bool_arg = 12;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Arg::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Arg::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Arg::GetClassData() const { return &_class_data_; }

void Arg::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Arg *>(to)->MergeFrom(
      static_cast<const Arg &>(from));
}


void Arg::MergeFrom(const Arg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:router.Arg)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_string_arg(from._internal_string_arg());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_torch_tensor_arg()->::router::TorchTensorArg::MergeFrom(from._internal_torch_tensor_arg());
    }
    if (cached_has_bits & 0x00000004u) {
      double_arg_ = from.double_arg_;
    }
    if (cached_has_bits & 0x00000008u) {
      float_arg_ = from.float_arg_;
    }
    if (cached_has_bits & 0x00000010u) {
      int32_arg_ = from.int32_arg_;
    }
    if (cached_has_bits & 0x00000020u) {
      int64_arg_ = from.int64_arg_;
    }
    if (cached_has_bits & 0x00000040u) {
      uint64_arg_ = from.uint64_arg_;
    }
    if (cached_has_bits & 0x00000080u) {
      sint64_arg_ = from.sint64_arg_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00007f00u) {
    if (cached_has_bits & 0x00000100u) {
      sint32_arg_ = from.sint32_arg_;
    }
    if (cached_has_bits & 0x00000200u) {
      fixed32_arg_ = from.fixed32_arg_;
    }
    if (cached_has_bits & 0x00000400u) {
      fixed64_arg_ = from.fixed64_arg_;
    }
    if (cached_has_bits & 0x00000800u) {
      sfixed64_arg_ = from.sfixed64_arg_;
    }
    if (cached_has_bits & 0x00001000u) {
      sfixed32_arg_ = from.sfixed32_arg_;
    }
    if (cached_has_bits & 0x00002000u) {
      bool_arg_ = from.bool_arg_;
    }
    if (cached_has_bits & 0x00004000u) {
      arg_type_ = from.arg_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Arg::CopyFrom(const Arg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:router.Arg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Arg::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_torch_tensor_arg()) {
    if (!torch_tensor_arg_->IsInitialized()) return false;
  }
  return true;
}

void Arg::InternalSwap(Arg* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &string_arg_, lhs_arena,
      &other->string_arg_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Arg, bool_arg_)
      + sizeof(Arg::bool_arg_)
      - PROTOBUF_FIELD_OFFSET(Arg, torch_tensor_arg_)>(
          reinterpret_cast<char*>(&torch_tensor_arg_),
          reinterpret_cast<char*>(&other->torch_tensor_arg_));
  swap(arg_type_, other->arg_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Arg::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_router_2eproto_getter, &descriptor_table_router_2eproto_once,
      file_level_metadata_router_2eproto[5]);
}

// ===================================================================

class InferEnqueueArg::_Internal {
 public:
  using HasBits = decltype(std::declval<InferEnqueueArg>()._has_bits_);
  static const ::router::RequestHeader& header(const InferEnqueueArg* msg);
  static void set_has_header(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_slo_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

const ::router::RequestHeader&
InferEnqueueArg::_Internal::header(const InferEnqueueArg* msg) {
  return *msg->header_;
}
InferEnqueueArg::InferEnqueueArg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  args_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:router.InferEnqueueArg)
}
InferEnqueueArg::InferEnqueueArg(const InferEnqueueArg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      args_(from.args_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::router::RequestHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  slo_ms_ = from.slo_ms_;
  // @@protoc_insertion_point(copy_constructor:router.InferEnqueueArg)
}

inline void InferEnqueueArg::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&header_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&slo_ms_) -
    reinterpret_cast<char*>(&header_)) + sizeof(slo_ms_));
}

InferEnqueueArg::~InferEnqueueArg() {
  // @@protoc_insertion_point(destructor:router.InferEnqueueArg)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void InferEnqueueArg::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete header_;
}

void InferEnqueueArg::ArenaDtor(void* object) {
  InferEnqueueArg* _this = reinterpret_cast< InferEnqueueArg* >(object);
  (void)_this;
}
void InferEnqueueArg::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void InferEnqueueArg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void InferEnqueueArg::Clear() {
// @@protoc_insertion_point(message_clear_start:router.InferEnqueueArg)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  args_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(header_ != nullptr);
    header_->Clear();
  }
  slo_ms_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InferEnqueueArg::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .router.RequestHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .router.Arg args = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_args(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // required int32 slo_ms = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_slo_ms(&has_bits);
          slo_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* InferEnqueueArg::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:router.InferEnqueueArg)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .router.RequestHeader header = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // repeated .router.Arg args = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_args_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_args(i), target, stream);
  }

  // required int32 slo_ms = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_slo_ms(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:router.InferEnqueueArg)
  return target;
}

size_t InferEnqueueArg::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:router.InferEnqueueArg)
  size_t total_size = 0;

  if (_internal_has_header()) {
    // required .router.RequestHeader header = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  if (_internal_has_slo_ms()) {
    // required int32 slo_ms = 3;
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_slo_ms());
  }

  return total_size;
}
size_t InferEnqueueArg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:router.InferEnqueueArg)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .router.RequestHeader header = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);

    // required int32 slo_ms = 3;
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_slo_ms());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .router.Arg args = 2;
  total_size += 1UL * this->_internal_args_size();
  for (const auto& msg : this->args_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData InferEnqueueArg::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    InferEnqueueArg::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*InferEnqueueArg::GetClassData() const { return &_class_data_; }

void InferEnqueueArg::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<InferEnqueueArg *>(to)->MergeFrom(
      static_cast<const InferEnqueueArg &>(from));
}


void InferEnqueueArg::MergeFrom(const InferEnqueueArg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:router.InferEnqueueArg)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  args_.MergeFrom(from.args_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_header()->::router::RequestHeader::MergeFrom(from._internal_header());
    }
    if (cached_has_bits & 0x00000002u) {
      slo_ms_ = from.slo_ms_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void InferEnqueueArg::CopyFrom(const InferEnqueueArg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:router.InferEnqueueArg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InferEnqueueArg::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(args_))
    return false;
  if (_internal_has_header()) {
    if (!header_->IsInitialized()) return false;
  }
  return true;
}

void InferEnqueueArg::InternalSwap(InferEnqueueArg* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  args_.InternalSwap(&other->args_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(InferEnqueueArg, slo_ms_)
      + sizeof(InferEnqueueArg::slo_ms_)
      - PROTOBUF_FIELD_OFFSET(InferEnqueueArg, header_)>(
          reinterpret_cast<char*>(&header_),
          reinterpret_cast<char*>(&other->header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata InferEnqueueArg::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_router_2eproto_getter, &descriptor_table_router_2eproto_once,
      file_level_metadata_router_2eproto[6]);
}

// ===================================================================

class InferEnqueueReturn::_Internal {
 public:
  using HasBits = decltype(std::declval<InferEnqueueReturn>()._has_bits_);
  static const ::router::ResponseHeader& header(const InferEnqueueReturn* msg);
  static void set_has_header(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::router::ResponseHeader&
InferEnqueueReturn::_Internal::header(const InferEnqueueReturn* msg) {
  return *msg->header_;
}
InferEnqueueReturn::InferEnqueueReturn(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  args_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:router.InferEnqueueReturn)
}
InferEnqueueReturn::InferEnqueueReturn(const InferEnqueueReturn& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      args_(from.args_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::router::ResponseHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:router.InferEnqueueReturn)
}

inline void InferEnqueueReturn::SharedCtor() {
header_ = nullptr;
}

InferEnqueueReturn::~InferEnqueueReturn() {
  // @@protoc_insertion_point(destructor:router.InferEnqueueReturn)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void InferEnqueueReturn::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete header_;
}

void InferEnqueueReturn::ArenaDtor(void* object) {
  InferEnqueueReturn* _this = reinterpret_cast< InferEnqueueReturn* >(object);
  (void)_this;
}
void InferEnqueueReturn::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void InferEnqueueReturn::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void InferEnqueueReturn::Clear() {
// @@protoc_insertion_point(message_clear_start:router.InferEnqueueReturn)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  args_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(header_ != nullptr);
    header_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InferEnqueueReturn::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .router.ResponseHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .router.Arg args = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_args(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* InferEnqueueReturn::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:router.InferEnqueueReturn)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .router.ResponseHeader header = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // repeated .router.Arg args = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_args_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_args(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:router.InferEnqueueReturn)
  return target;
}

size_t InferEnqueueReturn::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:router.InferEnqueueReturn)
  size_t total_size = 0;

  // required .router.ResponseHeader header = 1;
  if (_internal_has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .router.Arg args = 2;
  total_size += 1UL * this->_internal_args_size();
  for (const auto& msg : this->args_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData InferEnqueueReturn::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    InferEnqueueReturn::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*InferEnqueueReturn::GetClassData() const { return &_class_data_; }

void InferEnqueueReturn::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<InferEnqueueReturn *>(to)->MergeFrom(
      static_cast<const InferEnqueueReturn &>(from));
}


void InferEnqueueReturn::MergeFrom(const InferEnqueueReturn& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:router.InferEnqueueReturn)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  args_.MergeFrom(from.args_);
  if (from._internal_has_header()) {
    _internal_mutable_header()->::router::ResponseHeader::MergeFrom(from._internal_header());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void InferEnqueueReturn::CopyFrom(const InferEnqueueReturn& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:router.InferEnqueueReturn)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InferEnqueueReturn::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(args_))
    return false;
  return true;
}

void InferEnqueueReturn::InternalSwap(InferEnqueueReturn* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  args_.InternalSwap(&other->args_);
  swap(header_, other->header_);
}

::PROTOBUF_NAMESPACE_ID::Metadata InferEnqueueReturn::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_router_2eproto_getter, &descriptor_table_router_2eproto_once,
      file_level_metadata_router_2eproto[7]);
}

// ===================================================================

class SubnetDimension::_Internal {
 public:
  using HasBits = decltype(std::declval<SubnetDimension>()._has_bits_);
  static void set_has_depth(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_elastic_ratio(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_width_multiplier(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

SubnetDimension::SubnetDimension(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:router.SubnetDimension)
}
SubnetDimension::SubnetDimension(const SubnetDimension& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  depth_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    depth_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_depth()) {
    depth_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_depth(), 
      GetArenaForAllocation());
  }
  elastic_ratio_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    elastic_ratio_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_elastic_ratio()) {
    elastic_ratio_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_elastic_ratio(), 
      GetArenaForAllocation());
  }
  width_multiplier_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    width_multiplier_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_width_multiplier()) {
    width_multiplier_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_width_multiplier(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:router.SubnetDimension)
}

inline void SubnetDimension::SharedCtor() {
depth_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  depth_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
elastic_ratio_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  elastic_ratio_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
width_multiplier_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  width_multiplier_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SubnetDimension::~SubnetDimension() {
  // @@protoc_insertion_point(destructor:router.SubnetDimension)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SubnetDimension::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  depth_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  elastic_ratio_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  width_multiplier_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SubnetDimension::ArenaDtor(void* object) {
  SubnetDimension* _this = reinterpret_cast< SubnetDimension* >(object);
  (void)_this;
}
void SubnetDimension::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SubnetDimension::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SubnetDimension::Clear() {
// @@protoc_insertion_point(message_clear_start:router.SubnetDimension)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      depth_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      elastic_ratio_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      width_multiplier_.ClearNonDefaultToEmpty();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SubnetDimension::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bytes depth = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_depth();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes elastic_ratio = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_elastic_ratio();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes width_multiplier = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_width_multiplier();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SubnetDimension::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:router.SubnetDimension)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes depth = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_depth(), target);
  }

  // optional bytes elastic_ratio = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_elastic_ratio(), target);
  }

  // optional bytes width_multiplier = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_width_multiplier(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:router.SubnetDimension)
  return target;
}

size_t SubnetDimension::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:router.SubnetDimension)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional bytes depth = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_depth());
    }

    // optional bytes elastic_ratio = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_elastic_ratio());
    }

    // optional bytes width_multiplier = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_width_multiplier());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SubnetDimension::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SubnetDimension::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SubnetDimension::GetClassData() const { return &_class_data_; }

void SubnetDimension::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SubnetDimension *>(to)->MergeFrom(
      static_cast<const SubnetDimension &>(from));
}


void SubnetDimension::MergeFrom(const SubnetDimension& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:router.SubnetDimension)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_depth(from._internal_depth());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_elastic_ratio(from._internal_elastic_ratio());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_width_multiplier(from._internal_width_multiplier());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SubnetDimension::CopyFrom(const SubnetDimension& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:router.SubnetDimension)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubnetDimension::IsInitialized() const {
  return true;
}

void SubnetDimension::InternalSwap(SubnetDimension* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &depth_, lhs_arena,
      &other->depth_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &elastic_ratio_, lhs_arena,
      &other->elastic_ratio_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &width_multiplier_, lhs_arena,
      &other->width_multiplier_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata SubnetDimension::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_router_2eproto_getter, &descriptor_table_router_2eproto_once,
      file_level_metadata_router_2eproto[8]);
}

// ===================================================================

class InferWorkerArg::_Internal {
 public:
  using HasBits = decltype(std::declval<InferWorkerArg>()._has_bits_);
  static const ::router::SubnetDimension& subnet_dimension(const InferWorkerArg* msg);
  static void set_has_subnet_dimension(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::router::SubnetDimension&
InferWorkerArg::_Internal::subnet_dimension(const InferWorkerArg* msg) {
  return *msg->subnet_dimension_;
}
InferWorkerArg::InferWorkerArg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  worker_args_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:router.InferWorkerArg)
}
InferWorkerArg::InferWorkerArg(const InferWorkerArg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      worker_args_(from.worker_args_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_subnet_dimension()) {
    subnet_dimension_ = new ::router::SubnetDimension(*from.subnet_dimension_);
  } else {
    subnet_dimension_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:router.InferWorkerArg)
}

inline void InferWorkerArg::SharedCtor() {
subnet_dimension_ = nullptr;
}

InferWorkerArg::~InferWorkerArg() {
  // @@protoc_insertion_point(destructor:router.InferWorkerArg)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void InferWorkerArg::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete subnet_dimension_;
}

void InferWorkerArg::ArenaDtor(void* object) {
  InferWorkerArg* _this = reinterpret_cast< InferWorkerArg* >(object);
  (void)_this;
}
void InferWorkerArg::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void InferWorkerArg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void InferWorkerArg::Clear() {
// @@protoc_insertion_point(message_clear_start:router.InferWorkerArg)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  worker_args_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(subnet_dimension_ != nullptr);
    subnet_dimension_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InferWorkerArg::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .router.InferEnqueueArg worker_args = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_worker_args(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .router.SubnetDimension subnet_dimension = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_subnet_dimension(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* InferWorkerArg::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:router.InferWorkerArg)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .router.InferEnqueueArg worker_args = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_worker_args_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_worker_args(i), target, stream);
  }

  cached_has_bits = _has_bits_[0];
  // optional .router.SubnetDimension subnet_dimension = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::subnet_dimension(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:router.InferWorkerArg)
  return target;
}

size_t InferWorkerArg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:router.InferWorkerArg)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .router.InferEnqueueArg worker_args = 1;
  total_size += 1UL * this->_internal_worker_args_size();
  for (const auto& msg : this->worker_args_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional .router.SubnetDimension subnet_dimension = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *subnet_dimension_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData InferWorkerArg::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    InferWorkerArg::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*InferWorkerArg::GetClassData() const { return &_class_data_; }

void InferWorkerArg::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<InferWorkerArg *>(to)->MergeFrom(
      static_cast<const InferWorkerArg &>(from));
}


void InferWorkerArg::MergeFrom(const InferWorkerArg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:router.InferWorkerArg)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  worker_args_.MergeFrom(from.worker_args_);
  if (from._internal_has_subnet_dimension()) {
    _internal_mutable_subnet_dimension()->::router::SubnetDimension::MergeFrom(from._internal_subnet_dimension());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void InferWorkerArg::CopyFrom(const InferWorkerArg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:router.InferWorkerArg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InferWorkerArg::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(worker_args_))
    return false;
  return true;
}

void InferWorkerArg::InternalSwap(InferWorkerArg* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  worker_args_.InternalSwap(&other->worker_args_);
  swap(subnet_dimension_, other->subnet_dimension_);
}

::PROTOBUF_NAMESPACE_ID::Metadata InferWorkerArg::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_router_2eproto_getter, &descriptor_table_router_2eproto_once,
      file_level_metadata_router_2eproto[9]);
}

// ===================================================================

class InferWorkerReturn::_Internal {
 public:
};

InferWorkerReturn::InferWorkerReturn(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  worker_args_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:router.InferWorkerReturn)
}
InferWorkerReturn::InferWorkerReturn(const InferWorkerReturn& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      worker_args_(from.worker_args_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:router.InferWorkerReturn)
}

inline void InferWorkerReturn::SharedCtor() {
}

InferWorkerReturn::~InferWorkerReturn() {
  // @@protoc_insertion_point(destructor:router.InferWorkerReturn)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void InferWorkerReturn::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void InferWorkerReturn::ArenaDtor(void* object) {
  InferWorkerReturn* _this = reinterpret_cast< InferWorkerReturn* >(object);
  (void)_this;
}
void InferWorkerReturn::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void InferWorkerReturn::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void InferWorkerReturn::Clear() {
// @@protoc_insertion_point(message_clear_start:router.InferWorkerReturn)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  worker_args_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InferWorkerReturn::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .router.InferEnqueueReturn worker_args = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_worker_args(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* InferWorkerReturn::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:router.InferWorkerReturn)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .router.InferEnqueueReturn worker_args = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_worker_args_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_worker_args(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:router.InferWorkerReturn)
  return target;
}

size_t InferWorkerReturn::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:router.InferWorkerReturn)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .router.InferEnqueueReturn worker_args = 1;
  total_size += 1UL * this->_internal_worker_args_size();
  for (const auto& msg : this->worker_args_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData InferWorkerReturn::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    InferWorkerReturn::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*InferWorkerReturn::GetClassData() const { return &_class_data_; }

void InferWorkerReturn::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<InferWorkerReturn *>(to)->MergeFrom(
      static_cast<const InferWorkerReturn &>(from));
}


void InferWorkerReturn::MergeFrom(const InferWorkerReturn& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:router.InferWorkerReturn)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  worker_args_.MergeFrom(from.worker_args_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void InferWorkerReturn::CopyFrom(const InferWorkerReturn& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:router.InferWorkerReturn)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InferWorkerReturn::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(worker_args_))
    return false;
  return true;
}

void InferWorkerReturn::InternalSwap(InferWorkerReturn* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  worker_args_.InternalSwap(&other->worker_args_);
}

::PROTOBUF_NAMESPACE_ID::Metadata InferWorkerReturn::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_router_2eproto_getter, &descriptor_table_router_2eproto_once,
      file_level_metadata_router_2eproto[10]);
}

// ===================================================================

class LoadModelWorkerArg::_Internal {
 public:
  using HasBits = decltype(std::declval<LoadModelWorkerArg>()._has_bits_);
  static void set_has_model_path(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

LoadModelWorkerArg::LoadModelWorkerArg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:router.LoadModelWorkerArg)
}
LoadModelWorkerArg::LoadModelWorkerArg(const LoadModelWorkerArg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  model_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    model_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_model_path()) {
    model_path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_model_path(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:router.LoadModelWorkerArg)
}

inline void LoadModelWorkerArg::SharedCtor() {
model_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  model_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

LoadModelWorkerArg::~LoadModelWorkerArg() {
  // @@protoc_insertion_point(destructor:router.LoadModelWorkerArg)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void LoadModelWorkerArg::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  model_path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void LoadModelWorkerArg::ArenaDtor(void* object) {
  LoadModelWorkerArg* _this = reinterpret_cast< LoadModelWorkerArg* >(object);
  (void)_this;
}
void LoadModelWorkerArg::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LoadModelWorkerArg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void LoadModelWorkerArg::Clear() {
// @@protoc_insertion_point(message_clear_start:router.LoadModelWorkerArg)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    model_path_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LoadModelWorkerArg::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required string model_path = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_model_path();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "router.LoadModelWorkerArg.model_path");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LoadModelWorkerArg::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:router.LoadModelWorkerArg)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string model_path = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_model_path().data(), static_cast<int>(this->_internal_model_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "router.LoadModelWorkerArg.model_path");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_model_path(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:router.LoadModelWorkerArg)
  return target;
}

size_t LoadModelWorkerArg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:router.LoadModelWorkerArg)
  size_t total_size = 0;

  // required string model_path = 1;
  if (_internal_has_model_path()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_model_path());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LoadModelWorkerArg::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    LoadModelWorkerArg::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LoadModelWorkerArg::GetClassData() const { return &_class_data_; }

void LoadModelWorkerArg::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<LoadModelWorkerArg *>(to)->MergeFrom(
      static_cast<const LoadModelWorkerArg &>(from));
}


void LoadModelWorkerArg::MergeFrom(const LoadModelWorkerArg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:router.LoadModelWorkerArg)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_model_path()) {
    _internal_set_model_path(from._internal_model_path());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LoadModelWorkerArg::CopyFrom(const LoadModelWorkerArg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:router.LoadModelWorkerArg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoadModelWorkerArg::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void LoadModelWorkerArg::InternalSwap(LoadModelWorkerArg* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &model_path_, lhs_arena,
      &other->model_path_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata LoadModelWorkerArg::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_router_2eproto_getter, &descriptor_table_router_2eproto_once,
      file_level_metadata_router_2eproto[11]);
}

// ===================================================================

class LoadModelWorkerReturn::_Internal {
 public:
  using HasBits = decltype(std::declval<LoadModelWorkerReturn>()._has_bits_);
  static void set_has_status(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

LoadModelWorkerReturn::LoadModelWorkerReturn(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:router.LoadModelWorkerReturn)
}
LoadModelWorkerReturn::LoadModelWorkerReturn(const LoadModelWorkerReturn& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  status_ = from.status_;
  // @@protoc_insertion_point(copy_constructor:router.LoadModelWorkerReturn)
}

inline void LoadModelWorkerReturn::SharedCtor() {
status_ = 0;
}

LoadModelWorkerReturn::~LoadModelWorkerReturn() {
  // @@protoc_insertion_point(destructor:router.LoadModelWorkerReturn)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void LoadModelWorkerReturn::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void LoadModelWorkerReturn::ArenaDtor(void* object) {
  LoadModelWorkerReturn* _this = reinterpret_cast< LoadModelWorkerReturn* >(object);
  (void)_this;
}
void LoadModelWorkerReturn::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LoadModelWorkerReturn::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void LoadModelWorkerReturn::Clear() {
// @@protoc_insertion_point(message_clear_start:router.LoadModelWorkerReturn)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  status_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LoadModelWorkerReturn::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required int32 status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_status(&has_bits);
          status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LoadModelWorkerReturn::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:router.LoadModelWorkerReturn)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 status = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:router.LoadModelWorkerReturn)
  return target;
}

size_t LoadModelWorkerReturn::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:router.LoadModelWorkerReturn)
  size_t total_size = 0;

  // required int32 status = 1;
  if (_internal_has_status()) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_status());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LoadModelWorkerReturn::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    LoadModelWorkerReturn::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LoadModelWorkerReturn::GetClassData() const { return &_class_data_; }

void LoadModelWorkerReturn::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<LoadModelWorkerReturn *>(to)->MergeFrom(
      static_cast<const LoadModelWorkerReturn &>(from));
}


void LoadModelWorkerReturn::MergeFrom(const LoadModelWorkerReturn& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:router.LoadModelWorkerReturn)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_status()) {
    _internal_set_status(from._internal_status());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LoadModelWorkerReturn::CopyFrom(const LoadModelWorkerReturn& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:router.LoadModelWorkerReturn)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoadModelWorkerReturn::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void LoadModelWorkerReturn::InternalSwap(LoadModelWorkerReturn* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LoadModelWorkerReturn::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_router_2eproto_getter, &descriptor_table_router_2eproto_once,
      file_level_metadata_router_2eproto[12]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace router
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::router::RequestHeader* Arena::CreateMaybeMessage< ::router::RequestHeader >(Arena* arena) {
  return Arena::CreateMessageInternal< ::router::RequestHeader >(arena);
}
template<> PROTOBUF_NOINLINE ::router::ResponseHeader* Arena::CreateMaybeMessage< ::router::ResponseHeader >(Arena* arena) {
  return Arena::CreateMessageInternal< ::router::ResponseHeader >(arena);
}
template<> PROTOBUF_NOINLINE ::router::SetRouterSpecArg* Arena::CreateMaybeMessage< ::router::SetRouterSpecArg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::router::SetRouterSpecArg >(arena);
}
template<> PROTOBUF_NOINLINE ::router::SetRouterSpecReturn* Arena::CreateMaybeMessage< ::router::SetRouterSpecReturn >(Arena* arena) {
  return Arena::CreateMessageInternal< ::router::SetRouterSpecReturn >(arena);
}
template<> PROTOBUF_NOINLINE ::router::TorchTensorArg* Arena::CreateMaybeMessage< ::router::TorchTensorArg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::router::TorchTensorArg >(arena);
}
template<> PROTOBUF_NOINLINE ::router::Arg* Arena::CreateMaybeMessage< ::router::Arg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::router::Arg >(arena);
}
template<> PROTOBUF_NOINLINE ::router::InferEnqueueArg* Arena::CreateMaybeMessage< ::router::InferEnqueueArg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::router::InferEnqueueArg >(arena);
}
template<> PROTOBUF_NOINLINE ::router::InferEnqueueReturn* Arena::CreateMaybeMessage< ::router::InferEnqueueReturn >(Arena* arena) {
  return Arena::CreateMessageInternal< ::router::InferEnqueueReturn >(arena);
}
template<> PROTOBUF_NOINLINE ::router::SubnetDimension* Arena::CreateMaybeMessage< ::router::SubnetDimension >(Arena* arena) {
  return Arena::CreateMessageInternal< ::router::SubnetDimension >(arena);
}
template<> PROTOBUF_NOINLINE ::router::InferWorkerArg* Arena::CreateMaybeMessage< ::router::InferWorkerArg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::router::InferWorkerArg >(arena);
}
template<> PROTOBUF_NOINLINE ::router::InferWorkerReturn* Arena::CreateMaybeMessage< ::router::InferWorkerReturn >(Arena* arena) {
  return Arena::CreateMessageInternal< ::router::InferWorkerReturn >(arena);
}
template<> PROTOBUF_NOINLINE ::router::LoadModelWorkerArg* Arena::CreateMaybeMessage< ::router::LoadModelWorkerArg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::router::LoadModelWorkerArg >(arena);
}
template<> PROTOBUF_NOINLINE ::router::LoadModelWorkerReturn* Arena::CreateMaybeMessage< ::router::LoadModelWorkerReturn >(Arena* arena) {
  return Arena::CreateMessageInternal< ::router::LoadModelWorkerReturn >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
